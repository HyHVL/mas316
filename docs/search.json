[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Modelling of Renewable Energy Systems",
    "section": "",
    "text": "Description of the course\nIn this course, students will gain a deep understanding of the fundamental principles related to renewable energy production, including areas like hydrogen production and wind energy. The curriculum integrates theoretical knowledge with hands-on practical calculations, equipping students with the proficiency to model renewable energy production processes effectively.\nStudents will enhance their expertise in data analysis and modelling, essential skills for the renewable energy sector. They will be capable of conducting resource potential assessments, select optimal installation sites, and performing cost-benefit analyses to optimize renewable energy projects.",
    "crumbs": [
      "Description of the course"
    ]
  },
  {
    "objectID": "index.html#r-session",
    "href": "index.html#r-session",
    "title": "Modelling of Renewable Energy Systems",
    "section": "R session",
    "text": "R session\n\n\nR version 4.3.2 (2023-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 11 x64 (build 26100)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: Europe/Oslo\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.2    fastmap_1.1.1     cli_3.6.1        \n [5] htmltools_0.5.7   tools_4.3.2       rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43        jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       renv_1.0.0        evaluate_0.21",
    "crumbs": [
      "Description of the course"
    ]
  },
  {
    "objectID": "index.html#spatial-projection",
    "href": "index.html#spatial-projection",
    "title": "Modelling of Renewable Energy Systems",
    "section": "Spatial projection",
    "text": "Spatial projection\nWe use the CRS suggested by Geonorge. In this sense, the national wide data are in “ETRS89 / UTM zone 33N”, which correspond to the EPSG code of 25833 (link), and therefore we transform all our coordinates to that CRS.",
    "crumbs": [
      "Description of the course"
    ]
  },
  {
    "objectID": "intro_data_analysis.html",
    "href": "intro_data_analysis.html",
    "title": "Introduction",
    "section": "",
    "text": "Software",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro_data_analysis.html#software",
    "href": "intro_data_analysis.html#software",
    "title": "Introduction",
    "section": "",
    "text": "Python\n\nPython.org\nInstallation of packages/modules\nPandas\nGeoPandas\nNumpy\n\n\n\nRstudio\n\nIDE\nRstudio\n\n\n\nGitHub\n\nGitHub\nVersion control\n\n\n\nQuarto\n\nQuarto\nCode and text in the same document (e.g., this book)\nRun several different scripting programs (e.g., Python, R, … )\nHow to generate reports (pdf, HTLM,…)\nWebsites (GitHub pages)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro_data_analysis.html#types-of-data",
    "href": "intro_data_analysis.html#types-of-data",
    "title": "Introduction",
    "section": "Types of data",
    "text": "Types of data\n\nTabular data\n\n\nSpatial data\n\nCoordinate system\nVector (points, lines, polygons)\nRaster",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro_data_analysis.html#getting-help",
    "href": "intro_data_analysis.html#getting-help",
    "title": "Introduction",
    "section": "Getting help",
    "text": "Getting help\n\nPackage documentation (Vignettes R) / help()\nGoogle\nPython.org\nStackOverflow\nChatGPT",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "solar.html",
    "href": "solar.html",
    "title": "solar energy",
    "section": "",
    "text": "Exercise 1\nIntro to solar energy",
    "crumbs": [
      "solar energy"
    ]
  },
  {
    "objectID": "wind.html",
    "href": "wind.html",
    "title": "Wind energy",
    "section": "",
    "text": "Exercise 1\nIntro to wind energy\nMap wind turbines in Rogaland from OSM and calculate the total energy capacity installed.",
    "crumbs": [
      "Wind energy"
    ]
  },
  {
    "objectID": "wind.html#exercise-1",
    "href": "wind.html#exercise-1",
    "title": "Wind energy",
    "section": "",
    "text": "Objetives\n\nOSM (and how get data from it)\nMap points data (interactive map)\n\nManipulate spatial data (e.g., intersection points - polygons)\nTypes of data in a data frame\nData wrangling\n\n\n\nSolution\nLoad libraries\n\n\nShow the code\nlibrary(osmdata)\nlibrary(sf)\nlibrary(tmap)\nlibrary(tidyverse)\n\n\nGet data from OpenStreetMap with osmdata, and transform to a sf object.\n\n\nShow the code\nquery &lt;- opq(bbox = \"Rogaland\", timeout = 50) |&gt; \n   add_osm_feature(key = \"generator:source\", value = \"wind\")\ndata &lt;-  osmdata_sf(query)\n\nwind_turbines &lt;- data$osm_points \n\n\nNames of the data frame,\n\n\nShow the code\nwind_turbines |&gt;\n  names()\n\n\n [1] \"osm_id\"                           \"name\"                            \n [3] \"aeroway:light\"                    \"aeroway:light:character\"         \n [5] \"aeroway:light:colour\"             \"aeroway:light:icao_type\"         \n [7] \"aeroway:light:intensity\"          \"brand\"                           \n [9] \"date_constructed\"                 \"description\"                     \n[11] \"ele\"                              \"generator:method\"                \n[13] \"generator:output:electricity\"     \"generator:source\"                \n[15] \"generator:type\"                   \"height\"                          \n[17] \"man_made\"                         \"model\"                           \n[19] \"operator\"                         \"power\"                           \n[21] \"ref\"                              \"ref:hinder\"                      \n[23] \"ref:kystverket\"                   \"seamark:landmark:category\"       \n[25] \"seamark:landmark:conspicuity\"     \"seamark:landmark:vertical_length\"\n[27] \"seamark:light:1:character\"        \"seamark:light:1:colour\"          \n[29] \"seamark:light:1:group\"            \"seamark:light:1:height\"          \n[31] \"seamark:light:1:multiple\"         \"seamark:light:1:period\"          \n[33] \"seamark:light:1:range\"            \"seamark:light:2:category\"        \n[35] \"seamark:light:2:character\"        \"seamark:light:2:colour\"          \n[37] \"seamark:name\"                     \"seamark:type\"                    \n[39] \"serial_number\"                    \"source\"                          \n[41] \"geometry\"                        \n\n\nClean names\n\n\nShow the code\nwind_turbines &lt;- wind_turbines |&gt;\n  janitor::clean_names()\n\nnames(wind_turbines)\n\n\n [1] \"osm_id\"                           \"name\"                            \n [3] \"aeroway_light\"                    \"aeroway_light_character\"         \n [5] \"aeroway_light_colour\"             \"aeroway_light_icao_type\"         \n [7] \"aeroway_light_intensity\"          \"brand\"                           \n [9] \"date_constructed\"                 \"description\"                     \n[11] \"ele\"                              \"generator_method\"                \n[13] \"generator_output_electricity\"     \"generator_source\"                \n[15] \"generator_type\"                   \"height\"                          \n[17] \"man_made\"                         \"model\"                           \n[19] \"operator\"                         \"power\"                           \n[21] \"ref\"                              \"ref_hinder\"                      \n[23] \"ref_kystverket\"                   \"seamark_landmark_category\"       \n[25] \"seamark_landmark_conspicuity\"     \"seamark_landmark_vertical_length\"\n[27] \"seamark_light_1_character\"        \"seamark_light_1_colour\"          \n[29] \"seamark_light_1_group\"            \"seamark_light_1_height\"          \n[31] \"seamark_light_1_multiple\"         \"seamark_light_1_period\"          \n[33] \"seamark_light_1_range\"            \"seamark_light_2_category\"        \n[35] \"seamark_light_2_character\"        \"seamark_light_2_colour\"          \n[37] \"seamark_name\"                     \"seamark_type\"                    \n[39] \"serial_number\"                    \"source\"                          \n[41] \"geometry\"                        \n\n\nInteractive map with tmap.\n\n\nShow the code\ntmap_mode(\"view\")\n\ntm_shape(wind_turbines) +\n  tm_dots(col = \"#0072B2\")\n\n\n\n\n\n\n\n\nFigure 1: Wind turbines in Rogaland (Data from OSM)\n\n\n\n\nThere are some wind turbines that ar not in Rogaland, so we are going to delect them from the dataset. For that we need to intersect our points (wind turbines) with the polygon (Rogaland).\n\n\nShow the code\n# Get Norwegian counties (polygons)) from GISCO\ncounties &lt;- giscoR::gisco_get_nuts(country = \"NO\",\n                                   year = \"2021\",\n                                   nuts_level = 3,\n                                   epsg = \"4326\",\n                                   resolution = \"01\") \n# Get only rogaland county\nrogaland &lt;- counties |&gt; \n  filter(NUTS_NAME == \"Rogaland\")\n\n# Intersect wind turbines (points) with rogaland (polygons)\nwind_turbines &lt;- wind_turbines |&gt; \n  st_intersection(rogaland)\n\n# Plot\ntm_shape(wind_turbines) +\n  tm_dots(col = \"#0072B2\")\n\n\n\n\n\n\n\n\nFigure 2: Wind turbines in Rogaland (Data from OSM)\n\n\n\n\nNow, we are going to calculate the maximum capacity (MW) installed in the region. If we inspect the data, there is a column describing called generator:output:electricity, which give the information we are looking for in MW. However, if we inspect the columns we see that the values are characters (&lt;chr&gt;) not numbers, so we can not carried out numerical operations on them.\n\n\nShow the code\nglimpse(wind_turbines)\n\n\nRows: 256\nColumns: 50\n$ osm_id                           &lt;chr&gt; \"1277731149\", \"1510248163\", \"15102482…\n$ name                             &lt;chr&gt; \"Høg-Jæren energipark 31\", \"Høg-Jæren…\n$ aeroway_light                    &lt;chr&gt; \"obstacle\", NA, \"obstacle\", \"obstacle…\n$ aeroway_light_character          &lt;chr&gt; \"flashing\", NA, \"flashing\", \"flashing…\n$ aeroway_light_colour             &lt;chr&gt; \"red\", NA, \"red\", \"red\", \"red\", \"red\"…\n$ aeroway_light_icao_type          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ aeroway_light_intensity          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ brand                            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date_constructed                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ description                      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ ele                              &lt;chr&gt; \"264\", \"268\", \"250\", \"234\", \"205\", \"2…\n$ generator_method                 &lt;chr&gt; \"wind_turbine\", \"wind_turbine\", \"wind…\n$ generator_output_electricity     &lt;chr&gt; \"2.3 MW\", \"2.3 MW\", \"2.3 MW\", \"2.3 MW…\n$ generator_source                 &lt;chr&gt; \"wind\", \"wind\", \"wind\", \"wind\", \"wind…\n$ generator_type                   &lt;chr&gt; \"horizontal_axis\", \"horizontal_axis\",…\n$ height                           &lt;chr&gt; \"126\", \"126\", \"126\", \"126\", \"89\", \"89…\n$ man_made                         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ model                            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ operator                         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ power                            &lt;chr&gt; \"generator\", \"generator\", \"generator\"…\n$ ref                              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ ref_hinder                       &lt;chr&gt; \"70647\", \"70646\", \"70640\", \"71472\", \"…\n$ ref_kystverket                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_landmark_category        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_landmark_conspicuity     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_landmark_vertical_length &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_character        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_colour           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_group            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_height           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_multiple         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_period           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_1_range            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_2_category         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_2_character        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_light_2_colour           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_name                     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seamark_type                     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ serial_number                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ source                           &lt;chr&gt; \"Kartverket Luftfartshindre\", \"Kartve…\n$ NUTS_ID                          &lt;chr&gt; \"NO0A1\", \"NO0A1\", \"NO0A1\", \"NO0A1\", \"…\n$ LEVL_CODE                        &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ URBN_TYPE                        &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ CNTR_CODE                        &lt;chr&gt; \"NO\", \"NO\", \"NO\", \"NO\", \"NO\", \"NO\", \"…\n$ NAME_LATN                        &lt;chr&gt; \"Rogaland\", \"Rogaland\", \"Rogaland\", \"…\n$ NUTS_NAME                        &lt;chr&gt; \"Rogaland\", \"Rogaland\", \"Rogaland\", \"…\n$ MOUNT_TYPE                       &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ COAST_TYPE                       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ geo                              &lt;chr&gt; \"NO0A1\", \"NO0A1\", \"NO0A1\", \"NO0A1\", \"…\n$ geometry                         &lt;POINT [°]&gt; POINT (5.792002 58.65093), POIN…\n\n\nTherefore, we need to transform the data to numbers. We can use the function parse_number() from the package readr (inside tidyverse). For not deleting the column, we can generate a new one (e.g., gen_electricity_mw)\n\n\nShow the code\nwind_turbines &lt;- wind_turbines |&gt; \n  mutate(gen_electricity_mw = parse_number(generator_output_electricity) )\n     \n# Show first 10 values of the column\nwind_turbines$gen_electricity_mw |&gt; \n  head(10)\n\n\n [1] 2.3 2.3 2.3 2.3  NA  NA 2.3 2.3 2.3 2.3\n\n\nRemove NA in energy generator:\n\n\nShow the code\nwind_turbines &lt;- wind_turbines |&gt; \n  drop_na(gen_electricity_mw)\n\n# Summary of energy generator (without NA) \nwind_turbines$gen_electricity_mw |&gt; \n  head(10)\n\n\n [1] 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3\n\n\ncalculate the total generation energy capacity.\n\n\nShow the code\ntotal_capacity_mw &lt;- wind_turbines$gen_electricity_mw |&gt; sum()\n\nprint(total_capacity_mw)\n\n\n[1] 905.3\n\n\nSo the total wind capacity installed in Rogaland is 905.3 MW. Note, that this is only the maximum energy installed and not how much it is generate in the region. It does not take into account the efficiency of the turbines nor wind availability!!.",
    "crumbs": [
      "Wind energy"
    ]
  },
  {
    "objectID": "wind.html#exercise-2",
    "href": "wind.html#exercise-2",
    "title": "Wind energy",
    "section": "Exercise 2",
    "text": "Exercise 2\nMap wind farms and wind turbines from NVE (www.nve.no). The data are free but need to be downloaded from https://nedlasting.nve.no/gis/ before reading into R (save it in a folder: e.g., ~/data/big_data/NVE/NVEData). I have downloaded them in .geojson format. Therefore, we need to read them with the geojsonsf package, which converts GeoJSON to sf objects.\n\nObjetives\n\nLoad data from local files\nData wrangling (preprocessing)\nFormats of spatial data\nSpatial intersections (i.e., points - polygons)\nTypes of vector data (i.e., lines, points, polygons)\nPlot more that one layer in a interactive map\n\n\n\nSolution\n\n\nShow the code\n# Libraries\nlibrary(geojsonsf)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tmap)\n\n\nLoad data from a local file.\n\nWind turbines (point data)\n\n\n\nShow the code\nwind_turbines_nve_path &lt;- \"data/big_data/NVE/NVEData/Vindkraft_Vindturbin.geojson\"\nwind_turbines_nve &lt;- geojson_sf(wind_turbines_nve_path) |&gt; \n  # dataUttaksdato to date format\n  mutate(dataUttaksdato = ymd(dataUttaksdato))\n\nwind_turbines_nve\n\n\nSimple feature collection with 272 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.905257 ymin: 58.31454 xmax: 6.51592 ymax: 59.41634\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   objektType   saksTittel saksKategori dataUttaksdato              eksportType\n1  Vindturbin      Svåheia            2     2024-02-07 NVEs nedlastningsløsning\n2  Vindturbin       Tysvær            2     2024-02-07 NVEs nedlastningsløsning\n3  Vindturbin    Høg-Jæren            2     2024-02-07 NVEs nedlastningsløsning\n4  Vindturbin       Tysvær            2     2024-02-07 NVEs nedlastningsløsning\n5  Vindturbin    Bjerkreim            2     2024-02-07 NVEs nedlastningsløsning\n6  Vindturbin Vardafjellet            2     2024-02-07 NVEs nedlastningsløsning\n7  Vindturbin    Bjerkreim            2     2024-02-07 NVEs nedlastningsløsning\n8  Vindturbin   Måkaknuten            2     2024-02-07 NVEs nedlastningsløsning\n9  Vindturbin       Utsira            2     2024-02-07 NVEs nedlastningsløsning\n10 Vindturbin     Tellenes            2     2024-02-07 NVEs nedlastningsløsning\n                    geometry\n1  POINT (6.091838 58.38779)\n2  POINT (5.552303 59.31521)\n3   POINT (5.76918 58.64514)\n4   POINT (5.557336 59.2931)\n5  POINT (5.934883 58.59081)\n6  POINT (5.894319 58.83959)\n7  POINT (5.945595 58.58838)\n8  POINT (5.966087 58.68458)\n9  POINT (4.906018 59.31497)\n10 POINT (6.514851 58.34872)\n\n\n\nWind farms areas (Polygons)\n\n\n\nShow the code\nwind_farms_nve_path &lt;- \"data/big_data/NVE/NVEData/Vindkraft_VindkraftanleggOmr.geojson\"\nwind_farms_nve &lt;- geojson_sf(wind_farms_nve_path) |&gt; \n  # Coherce to dates format\n  mutate(across(.cols = ends_with(\"dato\"), .fns = ymd)) |&gt; \n  # Add ID column\n   rowid_to_column(\"id_farm\")\n\nwind_farms_nve\n\n\nSimple feature collection with 57 features and 15 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 4.890143 ymin: 58.2376 xmax: 6.520988 ymax: 59.61306\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   id_farm dataUttaksdato totaltAntTurbiner    objektType utAvDriftDato\n1        1     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n2        2     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n3        3     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n4        4     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n5        5     2024-02-07                37 Vindkraftverk          &lt;NA&gt;\n6        6     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n7        7     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n8        8     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n9        9     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n10      10     2024-02-07              &lt;NA&gt; Vindkraftverk          &lt;NA&gt;\n   idriftDato status fylkesnavn\n1        &lt;NA&gt;      V   Rogaland\n2        &lt;NA&gt;      V   Rogaland\n3        &lt;NA&gt;      V   Rogaland\n4        &lt;NA&gt;     FJ   Rogaland\n5  2019-12-19      D   Rogaland\n6        &lt;NA&gt;     FJ   Rogaland\n7        &lt;NA&gt;     FJ   Rogaland\n8        &lt;NA&gt;      V   Rogaland\n9        &lt;NA&gt;      V   Rogaland\n10       &lt;NA&gt;     FJ   Rogaland\n                                                                    saksLenke\n1  https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=194\n2   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=29\n3   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=36\n4   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=52\n5   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=32\n6   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=37\n7   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=64\n8   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=55\n9   https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=53\n10 https://www.nve.no/konsesjon/konsesjonssaker/konsesjonssak?type=A-6&id=120\n   forventetProduksjon_Gwh kommunenavn                       geometry\n1                     34.0   Stavanger POLYGON ((5.616381 59.07174...\n2                    408.0   Bjerkreim POLYGON ((5.892451 58.63726...\n3                    785.4   Bjerkreim POLYGON ((5.893369 58.70034...\n4                    272.0        Lund POLYGON ((6.26167 58.56276,...\n5                    558.4   Bjerkreim POLYGON ((5.995785 58.58672...\n6                    306.0   Eigersund POLYGON ((6.206857 58.56671...\n7                    306.0     Sokndal POLYGON ((6.153781 58.36661...\n8                    544.0     Gjesdal POLYGON ((6.293888 58.82249...\n9                    265.2   Bjerkreim POLYGON ((6.07609 58.68459,...\n10                   204.0      Karmøy POLYGON ((5.29149 59.23401,...\n   saksKategori               tiltakshaver effekt_MW              eksportType\n1             2 MARIN ENERGI TESTSENTER AS      10.0 NVEs nedlastningsløsning\n2             3         LYSE PRODUKSJON AS     120.0 NVEs nedlastningsløsning\n3             3         LYSE PRODUKSJON AS     231.0 NVEs nedlastningsløsning\n4             4          BJERKREIM VIND AS      80.0 NVEs nedlastningsløsning\n5             2          BJERKREIM VIND AS     159.1 NVEs nedlastningsløsning\n6             4          BJERKREIM VIND AS      90.0 NVEs nedlastningsløsning\n7             4                  ZEPHYR AS      90.0 NVEs nedlastningsløsning\n8             2     GILJA VINDKRAFTVERK AS     160.0 NVEs nedlastningsløsning\n9             3                  ZEPHYR AS      78.0 NVEs nedlastningsløsning\n10            4      EQUINOR WIND POWER AS      60.0 NVEs nedlastningsløsning\n\n\nMap both datasets together:\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntm_shape(wind_farms_nve) + \n  tm_fill(\"status\", alpha = 0.5, title = \"Wind farm status\") +\n  # Add wind turbines\n  tm_shape(wind_turbines_nve) +\n  tm_dots(col = \"#0072B2\")\n\n\n\n\n\n\n\n\nFigure 3: Wind turbines in Rogaland (Data from NVE)\n\n\n\n\nNote: Status\nD - Drift (Operations) N - Nedlagt (Decommissioned) O - Ombygd (Rebuilt) P - Planlagt (Planned) P1 - Planlagt illustrert (Planed illustrated) P2 - Planlagt, prosjektert (Planed, projected) U - Under arbeid (in progress) V - Vedtatt (Adopted) FJ - Fjernet (Removed)\nTo calculate the actual capacity installed, we need to select only the wind fards that are in operation from wind_farms_nve, and sum the power capacity (effekt_MW). We can do that by montds to see the temporal evolution.\n\n\nShow the code\npower_year &lt;- wind_farms_nve |&gt;\n  # Get only farm in operation\n  filter(status == \"D\") |&gt; \n  # Summarize power by month\n  group_by(year = lubridate::floor_date(idriftDato, \"year\")) %&gt;%\n  summarize(power_MW = sum(effekt_MW)) |&gt; \n  ungroup() |&gt; \n  # Cummulative sum\n  mutate(cumsum_power_MW = cumsum(power_MW))\n\n# Column plot\nggplot(data = power_year,\n       aes(x = year, y = cumsum_power_MW)) +\n  geom_col(fill = \"darkblue\") +\n  labs(title = \"Cumulative wind power installed in Rogaland\",\n       y = \"Power [MW]\",\n       x = \"\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nWe can count now the number of wind turbines per wind farm, to understand for example the volume of blades we may need to recycler.\n\n\nShow the code\n # Intersect points (wind turbines) wit polygons (wind farms)\nnumber_turbines_farm &lt;- wind_turbines_nve |&gt; \n  # Detect wind farm \n  st_intersection(wind_farms_nve) |&gt; \n  # Number of turbines \n  group_by(id_farm, status,  idriftDato, effekt_MW) |&gt; \n  summarize(n = n()) |&gt; \n  ungroup()\n\nnumber_turbines_farm\n\n\nSimple feature collection with 28 features and 5 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 4.905257 ymin: 58.31454 xmax: 6.51592 ymax: 59.41634\nGeodetic CRS:  WGS 84\n# A tibble: 28 × 6\n   id_farm status idriftDato effekt_MW     n                            geometry\n     &lt;int&gt; &lt;chr&gt;  &lt;date&gt;         &lt;dbl&gt; &lt;int&gt;                      &lt;GEOMETRY [°]&gt;\n 1       2 V      NA              120      1           POINT (5.885113 58.58739)\n 2       3 V      NA              231     22 MULTIPOINT ((5.909491 58.66277), (…\n 3       5 D      2019-12-19      159.    37 MULTIPOINT ((5.902099 58.58625), (…\n 4      14 D      2019-07-25       90     18 MULTIPOINT ((5.871099 58.57491), (…\n 5      16 D      2020-06-22       30      7 MULTIPOINT ((5.955698 58.66794), (…\n 6      19 D      2020-08-17       30      7 MULTIPOINT ((5.88813 58.8301), (5.…\n 7      29 D      2018-02-13       10      3 MULTIPOINT ((5.93595 58.72669), (5…\n 8      30 D      2018-10-12       10      2 MULTIPOINT ((5.908438 58.74937), (…\n 9      32 P2     NA               15      4 MULTIPOINT ((4.905952 59.31499), (…\n10      33 D      2017-11-16      110     33 MULTIPOINT ((6.119956 58.4561), (6…\n# ℹ 18 more rows\n\n\nNow we are going to plot the evolution but in the number od witd turbines in operation:\n\n\nShow the code\nturbines_year &lt;- number_turbines_farm |&gt;\n  # Get only farm in operation\n  filter(status == \"D\") |&gt; \n  # Summarize power by month\n  group_by(year = lubridate::floor_date(idriftDato, \"year\")) %&gt;%\n  summarize(num_turbines = sum(n)) |&gt; \n  ungroup() |&gt; \n  # Cummulative sum\n  mutate(cumsum_num_turbines = cumsum(num_turbines))\n\n# Column plot\nggplot(data = turbines_year,\n       aes(x = year, y = cumsum_num_turbines)) +\n  geom_col(fill = \"darkblue\") +\n  labs(title = \"Cumulative number of wind turbines installed in Rogaland\",\n       y = \"\",\n       x = \"\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nHow would you improve these figures? For example, we can change the background colour, add subtitles and captions, change font sizes, etc. Can you generate your own figure? Why do you think it looks better? As an example I have created this one, what do you think?\n\n\nShow the code\ncaption_text &lt;- \"Data source: The Norwegian Water Resources and Energy Directorate (NVE)\\nAuthor: Javier Elío (@Elio_javi) - Western Norway University of Applied Sciences\"\n\n# Column plot\nggplot(data = power_year,\n       aes(x = year, y = cumsum_power_MW)) +\n  geom_col(fill = \"#0072B2\") +\n  labs(title = \"Wind energy in Rogaland (Norway)\",\n       subtitle = \"Cumulative power installed capacity in MW\",\n       caption = caption_text,\n       y = \"\",\n       x = \"\") +\n  expand_limits(y = c(0, 1700)) +\n  theme_bw() +\n  theme(\n    # Title and captions\n    plot.title = element_text(size = 15, colour = \"darkblue\", face = \"bold\"),\n    plot.subtitle = element_text(size = 10, colour = \"grey25\"),\n    plot.caption = element_text(size = 10, colour = \"grey25\"),\n    # Background colour\n    plot.background = element_rect(fill = \"linen\", colour = NA),\n    panel.background = element_rect(fill = \"grey85\", colour = NA)\n  ) +\n  # Add arrow\n  annotate(\n    'curve',\n    x = as.Date(\"2016-01-01\"), # Play around with the coordinates until you're satisfied\n    y = 800,\n    yend = 1600,\n    xend = as.Date(\"2021-01-01\"),\n    linewidth = 1.5,\n    curvature = 0.3,\n    col = \"#D55E00\",\n    arrow = arrow(length = unit(0.5, 'cm'))\n  ) +\n  # Add text\n  annotate(\n    'text',\n    x = as.Date(\"2012-06-01\"),\n    y = 1300,\n    label = \"The installed capacity has nearly\\ndoubled between 2017 and 2021.\\nWhat will the limit be?\",\n    size = 3.5,\n    hjust = 0\n  )",
    "crumbs": [
      "Wind energy"
    ]
  },
  {
    "objectID": "wind.html#exercise-3",
    "href": "wind.html#exercise-3",
    "title": "Wind energy",
    "section": "Exercise 3",
    "text": "Exercise 3\n\nObjetives\n\nGet wind data from NORA3 link.\n\nbase on matlab fucntions link\n\n\nSolution\n\n\nShow the code\nlibrary(terra)\nlibrary(tidyterra)\nlibrary(eurostat)\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(patchwork)\nlibrary(ncdf4)\n\n\n\n\nShow the code\n# # EU map\n# box &lt;- st_bbox(c(xmin = -20, xmax = 20, ymax = 45, ymin = 80),\n#                 crs = st_crs(4326)) |&gt; \n#   st_as_sfc() |&gt; \n#   st_transform(3035)\n\neu_countries &lt;- get_eurostat_geospatial(resolution = 10, \n                                        nuts_level = 0, \n                                        year = 2016,\n                                        crs = \"3035\") \n\n\nRead data directly from the web (wiothout dowloading the data to a local folder\n\n\nShow the code\n#' Get the data of wind speed and direction at specific heihts from a raster\n#' @param .r NORA3 data (SpatRaster)\n#' @param .height Height to get the data (20, 50, 100, 250, 750)\n\nget_wind_height &lt;- function(.r, .height = 100){\n  \n  # Velocity vector (y, y)\n  ux = subset(.r, paste0(\"x_wind_\", .height, \"m\"))\n  uy = subset(.r, paste0(\"y_wind_\", .height, \"m\"))\n  \n  # Calculate magnityd (mag) and direction (dir)\n  u_mag = sqrt(ux^2 + uy^2)\n  names(u_mag) &lt;- \"magnitude\"\n  u_dir = terra::atan2(y = uy, x = ux) * 180/pi\n  names(u_dir) &lt;- \"direction\"\n\n  # Generate raster \n  u = c(u_mag, u_dir) \n  \n  # Output as one raster\n  return(u)\n  \n}\n\n# Function for dowloading wind data from NORA3 \nget_wind_z &lt;- function(.year,\n                       .month,\n                       .day,\n                       .hour_group,\n                       .lead_time){\n  \n  # URL of the data\n  nora3_url &lt;- paste0(\"https://thredds.met.no/thredds/dodsC/nora3/\",\n                      .year,\n                      \"/\",\n                      .month,\n                      \"/\",\n                      .day, \n                      \"/\",\n                      .hour_group,\n                      \"/fc\", \n                      .year,\n                      .month, \n                      .day,\n                      .hour_group,\n                      \"_\",\n                      .lead_time,\n                      \"_fp.nc\")\n  \n  # Open the netCDF file\n  ncin &lt;- ncdf4::nc_open(nora3_url)\n  \n  # Get coordinate  variables\n  lon &lt;- ncdf4::ncvar_get(ncin,\"x\")\n  lat &lt;- ncdf4::ncvar_get(ncin,\"y\")\n  \n  # Get time\n  time &lt;- ncdf4::ncvar_get(ncin,\"time\")\n  \n  # Get wind speed at 10 m above ground (height4)\n  dname &lt;- \"wind_speed\"\n  ws10_array &lt;- ncdf4::ncvar_get(ncin,dname)\n  dlname &lt;- ncdf4::ncatt_get(ncin,dname,\"standard_name\")\n  dunits &lt;- ncdf4::ncatt_get(ncin,dname,\"units\")\n  fillvalue &lt;- ncdf4::ncatt_get(ncin,dname,\"_FillValue\")\n  # replace netCDF fill values with NA's\n  ws10_array[ws10_array == fillvalue$value] &lt;- NA\n  \n  # Get wind direction at 10 m above ground (height4)\n  dname &lt;- \"wind_direction\"\n  wd10_array &lt;- ncdf4::ncvar_get(ncin,dname)\n  dlname &lt;- ncdf4::ncatt_get(ncin,dname,\"standard_name\")\n  dunits &lt;- ncdf4::ncatt_get(ncin,dname,\"units\")\n  fillvalue &lt;- ncdf4::ncatt_get(ncin,dname,\"_FillValue\")\n  # replace netCDF fill values with NA's\n  wd10_array[wd10_array == fillvalue$value] &lt;- NA\n  \n  # x_wind_z[x,y,height2,time] \n  # ncdf4::ncvar_get(ncin,\"height2\") -- 20  50 100 250 500 750 m above ground\n  dname &lt;- \"x_wind_z\"\n  xh2_array &lt;- ncdf4::ncvar_get(ncin,dname)\n  dlname &lt;- ncdf4::ncatt_get(ncin,dname,\"standard_name\")\n  dunits &lt;- ncdf4::ncatt_get(ncin,dname,\"units\")\n  fillvalue &lt;- ncdf4::ncatt_get(ncin,dname,\"_FillValue\")\n  # replace netCDF fill values with NA's\n  xh2_array[xh2_array == fillvalue$value] &lt;- NA\n  \n  # y_wind_z[x,y,height2,time]\n  dname &lt;- \"y_wind_z\"\n  yh2_array &lt;- ncdf4::ncvar_get(ncin,dname)\n  dlname &lt;- ncdf4::ncatt_get(ncin,dname,\"standard_name\")\n  dunits &lt;- ncdf4::ncatt_get(ncin,dname,\"units\")\n  fillvalue &lt;- ncdf4::ncatt_get(ncin,dname,\"_FillValue\")\n  # replace netCDF fill values with NA's\n  yh2_array[yh2_array == fillvalue$value] &lt;- NA\n  \n  \n  # create dataframe with values\n  df &lt;- expand.grid(lon,lat) |&gt; \n    as_tibble() |&gt; \n    dplyr::rename_with(~ c(\"lon\", \"lat\"), 1:2) |&gt; \n    # Add wind speed and direction at 10 m\n    dplyr::mutate(wind10_mag = as.vector(ws10_array),\n                  wind10_dir = as.vector(wd10_array)) |&gt; \n    # Add wind speed at h2 \n    dplyr::mutate(\n      # x_wind_z\n      x_wind_20m  = as.vector(xh2_array[ , , 1]),\n      x_wind_50m  = as.vector(xh2_array[ , , 2]),\n      x_wind_100m = as.vector(xh2_array[ , , 3]),\n      x_wind_250m = as.vector(xh2_array[ , , 4]),\n      x_wind_500m = as.vector(xh2_array[ , , 5]),\n      x_wind_750m = as.vector(xh2_array[ , , 6]),\n      # y_wind_z \n      y_wind_20m  = as.vector(yh2_array[ , , 1]),\n      y_wind_50m  = as.vector(yh2_array[ , , 2]),\n      y_wind_100m = as.vector(yh2_array[ , , 3]),\n      y_wind_250m = as.vector(yh2_array[ , , 4]),\n      y_wind_500m = as.vector(yh2_array[ , , 5]),\n      y_wind_750m = as.vector(yh2_array[ , , 6])\n    )\n  \n  # Create Raster with all data\n  r_crs &lt;- \"+proj=lcc +lat_0=66.3 +lon_0=-42 +lat_1=66.3 +lat_2=66.3 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs\"\n  r &lt;- tidyterra::as_spatraster(df, crs = r_crs, digits = 4)\n  # Add time \n  time(r) &lt;- rep(lubridate::as_datetime(time, tz = \"UTC\"), times = length(names(r)))\n  \n  # get wind speed and direction at all heights\n  ff &lt;- function(.height) { get_wind_height(r, .height) }\n  u_height_list &lt;- c(20, 50, 100, 250, 750)\n  u_height &lt;- map(u_height_list, ff)\n  names(u_height) &lt;- c(\"wind20\", \"wind50\", \"wind100\", \"wind250\", \"wind750\")\n  u_height &lt;- u_height |&gt;\n    rast() |&gt; \n    rename_with( ~ gsub(\"_1\", \"_mag\", .x, fixed = TRUE)) |&gt; \n    rename_with( ~ gsub(\"_2\", \"_dir\", .x, fixed = TRUE))\n  \n  # Retrurn SpatRaster object\n  rr &lt;- c(tidyterra::select(r, wind10_mag,  wind10_dir), u_height)\n  \n  return(rr)\n  \n} \n\n\n\n\nShow the code\nwind_nora3 &lt;- get_wind_z(.year = \"2018\",\n                         .month = \"11\",\n                         .day = \"08\",\n                         .hour_group = \"00\",\n                         .lead_time = \"004\")\n\nwind_nora3\n\n\nclass       : SpatRaster \ndimensions  : 1489, 889, 12  (nrow, ncol, nlyr)\nresolution  : 2999.875, 2999.969  (x, y)\nextent      : 776860.9, 3443750, -1271977, 3194976  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=lcc +lat_0=66.3 +lon_0=-42 +lat_1=66.3 +lat_2=66.3 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs \nsource(s)   : memory\nnames       :   wind10_mag,   wind10_dir,   wind20_mag, wind20_dir,   wind50_mag, wind50_dir, ... \nmin values  :  0.004474435, 3.791680e-04,  0.003715257,  -179.9983,  0.006306755,  -179.9968, ... \nmax values  : 26.079982758, 3.599998e+02, 27.383629015,   179.9978, 29.652804073,   179.9996, ... \ntime        : 2018-11-08 04:00:00 UTC \n\n\n\n\nShow the code\nggplot() +\n  geom_spatraster(data =  select(wind_nora3 , ends_with(\"mag\"))) +\n  facet_wrap(~lyr, ncol = 2) +\n  scale_fill_whitebox_c(name = \"u [m/s]\", palette = \"viridi\") +\n  geom_sf(data = eu_countries, fill = NA, colour = \"white\") +\n  coord_sf(expand = FALSE, crs = sf::st_crs(3035)) +\n  scale_x_continuous(limits = c(3000000, 5000000)) +\n  scale_y_continuous(limits = c(3600000, 5300000)) +\n  labs(title = terra::time(wind_nora3)[1]) +\n  theme_bw()\n\n\n\n\n\n\n\n\nFigure 4\n\n\n\n\n\nExtract values from one point (e.g., near Utsira - Coordinates from google maps [WGS84]: 59.346588 (lat), 4.899842 (long)).\n\n\nShow the code\n# Point \nxy &lt;- cbind(4.899842, 59.346588)\npoint &lt;- vect(xy, crs=\"+proj=longlat +datum=WGS84\") |&gt; \n  project(crs(wind_nora3))\n\n# Extract values\np_wind &lt;- terra::extract(wind_nora3, point) |&gt;  \n  select(ends_with(\"_mag\")) |&gt; \n  pivot_longer(cols = everything()) |&gt; \n  rename(height_m = name,\n         wind_m_s = value) |&gt; \n  mutate(height_m = readr::parse_number(height_m))\n  \n\n# Plot\nggplot() + \n  geom_point(data = p_wind,\n             aes(x = wind_m_s, y = height_m ),\n             col = \"blue\") +\n  labs(x = \"u [m/s]\",\n       y = \"height [m]\",\n       title = \"Vertical wind profile at point: 59.346588 (lat), 4.899842 (long)\", \n       subtitle = terra::time(wind_nora3)[1]) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nInterpolation winf prroflile (Solbrekke and Sorteberg 2022):\n\nExponential relation:\n\\[  u_{z_2}(t) = u_{z_1}(t) \\Big(\\frac{z_2}{z_1}\\Big)^{\\alpha(t)} \\]\nExponential power law coefficient:\n\\[  \\alpha(t) = \\frac{ln\\Big( \\frac{u_{z_2}(t)}{u_{z_1}(t)} \\Big)}{ln\\Big( \\frac{z_2}{z_1} \\Big)} \\]\n\n\n\nShow the code\n# Vector with alpha depending on height\nalpha &lt;- rep(NA, 5)\nfor(i in seq_along(alpha)) {\n  alpha[i] = as.numeric( (log(p_wind[i, 2]/p_wind[i+1, 2]) / log(p_wind[i, 1]/p_wind[i+1, 1])) )\n}\n\n# Create data frame for interpolation (steps 5 m) \nwind_inter &lt;- tibble(height_m = seq(10, 750, 5)) |&gt; \n  mutate(wind_m_s = NA) |&gt; \n  mutate(alpha = case_when(\n    height_m &lt;= 20 ~ alpha[1],\n    height_m &gt;  20 &  height_m &lt;=  50 ~ alpha[2],\n    height_m &gt;  50 &  height_m &lt;= 100 ~ alpha[3],\n    height_m &gt; 100 &  height_m &lt;= 250 ~ alpha[4],\n    height_m &gt; 250 &  height_m &lt;= 750 ~ alpha[5]\n  ))  \n\n# Interpolation (based on u [m/s] at 10 m)\nwind_inter$wind_m_s[1] = p_wind[p_wind[\"height_m\"] == 10, ]$wind_m_s\nfor(i in 2:length(wind_inter$height_m)) {\n  wind_inter$wind_m_s[i] = wind_inter$wind_m_s[i-1] * (wind_inter$height_m[i] / wind_inter$height_m[i-1])^wind_inter$alpha[i]\n}\n\n# Plot\nggplot() + \n  geom_point(data = p_wind,\n             aes(x = wind_m_s, y = height_m ),\n             col = \"blue\") +\n  geom_line(data = wind_inter,\n             aes(x = wind_m_s, y = height_m ),\n             col = \"red\") + \n  labs(x = \"u [m/s]\",\n       y = \"height [m]\",\n       title = \"Vertical wind profile at point: 59.346588 (lat), 4.899842 (long)\", \n       subtitle = terra::time(wind_nora3)[1]) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolbrekke, Ida Marie, and Asgeir Sorteberg. 2022. “NORA3-WP: A High-Resolution Offshore Wind Power Dataset for the Baltic, North, Norwegian, and Barents Seas.” Scientific Data 9 (1): 362. https://doi.org/10.1038/s41597-022-01451-x.",
    "crumbs": [
      "Wind energy"
    ]
  },
  {
    "objectID": "hydroelectric.html",
    "href": "hydroelectric.html",
    "title": "Hydroelectric energy",
    "section": "",
    "text": "Exercises\nIntro to Hydropower",
    "crumbs": [
      "Hydroelectric energy"
    ]
  },
  {
    "objectID": "hydrogen.html",
    "href": "hydrogen.html",
    "title": "Hydrogen production",
    "section": "",
    "text": "Exercises\nIntro to hydrogen as energy carrier",
    "crumbs": [
      "Hydrogen production"
    ]
  }
]