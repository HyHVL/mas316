---
execute:
  warning: false
---

# Wind energy {.unnumbered}

Intro to wind energy

## Exercise 1

Map wind turbines in Rogaland from OSM and calculate the total energy capacity installed.

### Objetives

-   OSM (and how get data from it)
-   Map points data (interactive map)\
-   Manipulate spatial data (e.g., intersection points - polygons)
-   Types of data in a data frame
-   Data wrangling

### Solution

Load libraries

```{r}

library(osmdata)
library(sf)
library(tmap)
library(tidyverse)

```

Get data from [OpenStreetMap](https://www.openstreetmap.org/) with `osmdata`, and transform to a `sf` object.

```{r}

query <- opq(bbox = "Rogaland", timeout = 50) |> 
   add_osm_feature(key = "generator:source", value = "wind")
data <-  osmdata_sf(query)

wind_turbines <- data$osm_points 

```

Names of the data frame,

```{r}

wind_turbines |>
  names()

```

Clean names

```{r}

wind_turbines <- wind_turbines |>
  janitor::clean_names()

names(wind_turbines)

```

Interactive map with `tmap`.

```{r}
#| label: fig-map-osm-a
#| fig-cap: Wind turbines in Rogaland (Data from OSM)


tmap_mode("view")

tm_shape(wind_turbines) +
  tm_dots(col = "#0072B2")

```

There are some wind turbines that ar not in Rogaland, so we are going to delect them from the dataset. For that we need to intersect our points (`wind turbines`) with the polygon (`Rogaland`).

```{r}
#| label: fig-map-osm-b
#| fig-cap: Wind turbines in Rogaland (Data from OSM)


# Get Norwegian counties (polygons)) from GISCO
counties <- giscoR::gisco_get_nuts(country = "NO",
                                   year = "2021",
                                   nuts_level = 3,
                                   epsg = "4326",
                                   resolution = "01") 
# Get only rogaland county
rogaland <- counties |> 
  filter(NUTS_NAME == "Rogaland")

# Intersect wind turbines (points) with rogaland (polygons)
wind_turbines <- wind_turbines |> 
  st_intersection(rogaland)

# Plot
tm_shape(wind_turbines) +
  tm_dots(col = "#0072B2")

```

Now, we are going to calculate the maximum capacity (MW) installed in the region. If we inspect the data, there is a column describing called `generator:output:electricity`, which give the information we are looking for in MW. However, if we inspect the columns we see that the values are characters (`<chr>`) not numbers, so we can not carried out numerical operations on them.

```{r}

glimpse(wind_turbines)

```

Therefore, we need to transform the data to numbers. We can use the function `parse_number()` from the package `readr` (inside `tidyverse`). For not deleting the column, we can generate a new one (e.g., `gen_electricity_mw`)

```{r}

wind_turbines <- wind_turbines |> 
  mutate(gen_electricity_mw = parse_number(generator_output_electricity) )
     
# Show first 10 values of the column
wind_turbines$gen_electricity_mw |> 
  head(10)

```

Remove `NA` in energy generator:

```{r}

wind_turbines <- wind_turbines |> 
  drop_na(gen_electricity_mw)

# Summary of energy generator (without NA) 
wind_turbines$gen_electricity_mw |> 
  head(10)

```

calculate the total generation energy capacity.

```{r}

total_capacity_mw <- wind_turbines$gen_electricity_mw |> sum()

print(total_capacity_mw)

```

So the total wind capacity installed in Rogaland is `r total_capacity_mw` MW. Note, that this is only the maximum energy installed and not how much it is generate in the region. It does not take into account the efficiency of the turbines nor wind availability!!.

## Exercise 2

Map wind farms and wind turbines from NVE ([www.nve.no](https://www.nve.no/)). The data are free but need to be downloaded from <https://nedlasting.nve.no/gis/> before reading into R (save it in a folder: e.g., `~/data/big_data/NVE/NVEData`). I have downloaded them in `.geojson` format. Therefore, we need to read them with the `geojsonsf` package, which converts `GeoJSON` to `sf` objects.

### Objetives

-   Load data from local files
-   Data wrangling (preprocessing)
-   Formats of spatial data
-   Spatial intersections (i.e., points - polygons)
-   Types of vector data (i.e., lines, points, polygons)
-   Plot more that one layer in a interactive map

### Solution

```{r}
#| label: nve-data

# Libraries
library(geojsonsf)
library(sf)
library(tidyverse)
library(tmap)

```

Load data from a local file.

a)  Wind turbines (point data)

```{r}
#| label: load-nve-wind-turbines

wind_turbines_nve_path <- "data/big_data/NVE/NVEData/Vindkraft_Vindturbin.geojson"
wind_turbines_nve <- geojson_sf(wind_turbines_nve_path) |> 
  # dataUttaksdato to date format
  mutate(dataUttaksdato = ymd(dataUttaksdato))

wind_turbines_nve

```

b)  Wind farms areas (Polygons)

```{r}
#| label: load-nve-wind-farms


wind_farms_nve_path <- "data/big_data/NVE/NVEData/Vindkraft_VindkraftanleggOmr.geojson"
wind_farms_nve <- geojson_sf(wind_farms_nve_path) |> 
  # Coherce to dates format
  mutate(across(.cols = ends_with("dato"), .fns = ymd)) |> 
  # Add ID column
   rowid_to_column("id_farm")

wind_farms_nve

```

Map both datasets together:

```{r}
#| label: fig-map-nve
#| fig-cap: Wind turbines in Rogaland (Data from NVE)


tmap_mode("view")


tm_shape(wind_farms_nve) + 
  tm_fill("status", alpha = 0.5, title = "Wind farm status") +
  # Add wind turbines
  tm_shape(wind_turbines_nve) +
  tm_dots(col = "#0072B2")

```

Note: Status

D - Drift (Operations) N - Nedlagt (Decommissioned) O - Ombygd (Rebuilt) P - Planlagt (Planned) P1 - Planlagt illustrert (Planed illustrated) P2 - Planlagt, prosjektert (Planed, projected) U - Under arbeid (in progress) V - Vedtatt (Adopted) FJ - Fjernet (Removed)

To calculate the actual capacity installed, we need to select only the wind fards that are in operation from `wind_farms_nve`, and sum the power capacity (`effekt_MW`). We can do that by montds to see the temporal evolution.

```{r}
power_year <- wind_farms_nve |>
  # Get only farm in operation
  filter(status == "D") |> 
  # Summarize power by month
  group_by(year = lubridate::floor_date(idriftDato, "year")) %>%
  summarize(power_MW = sum(effekt_MW)) |> 
  ungroup() |> 
  # Cummulative sum
  mutate(cumsum_power_MW = cumsum(power_MW))

# Column plot
ggplot(data = power_year,
       aes(x = year, y = cumsum_power_MW)) +
  geom_col(fill = "darkblue") +
  labs(title = "Cumulative wind power installed in Rogaland",
       y = "Power [MW]",
       x = "") +
  theme_bw()

```

We can count now the number of wind turbines per wind farm, to understand for example the volume of blades we may need to recycler.

```{r}

 # Intersect points (wind turbines) wit polygons (wind farms)
number_turbines_farm <- wind_turbines_nve |> 
  # Detect wind farm 
  st_intersection(wind_farms_nve) |> 
  # Number of turbines 
  group_by(id_farm, status,  idriftDato, effekt_MW) |> 
  summarize(n = n()) |> 
  ungroup()

number_turbines_farm

```

Now we are going to plot the evolution but in the number od witd turbines in operation:

```{r}

turbines_year <- number_turbines_farm |>
  # Get only farm in operation
  filter(status == "D") |> 
  # Summarize power by month
  group_by(year = lubridate::floor_date(idriftDato, "year")) %>%
  summarize(num_turbines = sum(n)) |> 
  ungroup() |> 
  # Cummulative sum
  mutate(cumsum_num_turbines = cumsum(num_turbines))

# Column plot
ggplot(data = turbines_year,
       aes(x = year, y = cumsum_num_turbines)) +
  geom_col(fill = "darkblue") +
  labs(title = "Cumulative number of wind turbines installed in Rogaland",
       y = "",
       x = "") +
  theme_bw()


```

How would you improve these figures? For example, we can change the background colour, add subtitles and captions, change font sizes, etc. Can you generate your own figure? Why do you think it looks better? As an example I have created this one, what do you think?

```{r}


caption_text <- "Data source: The Norwegian Water Resources and Energy Directorate (NVE)\nAuthor: Javier ElÃ­o (@Elio_javi) - Western Norway University of Applied Sciences"

# Column plot
ggplot(data = power_year,
       aes(x = year, y = cumsum_power_MW)) +
  geom_col(fill = "#0072B2") +
  labs(title = "Wind energy in Rogaland (Norway)",
       subtitle = "Cumulative power installed capacity in MW",
       caption = caption_text,
       y = "",
       x = "") +
  expand_limits(y = c(0, 1700)) +
  theme_bw() +
  theme(
    # Title and captions
    plot.title = element_text(size = 15, colour = "darkblue", face = "bold"),
    plot.subtitle = element_text(size = 10, colour = "grey25"),
    plot.caption = element_text(size = 10, colour = "grey25"),
    # Background colour
    plot.background = element_rect(fill = "linen", colour = NA),
    panel.background = element_rect(fill = "grey85", colour = NA)
  ) +
  # Add arrow
  annotate(
    'curve',
    x = as.Date("2016-01-01"), # Play around with the coordinates until you're satisfied
    y = 800,
    yend = 1600,
    xend = as.Date("2021-01-01"),
    linewidth = 1.5,
    curvature = 0.3,
    col = "#D55E00",
    arrow = arrow(length = unit(0.5, 'cm'))
  ) +
  # Add text
  annotate(
    'text',
    x = as.Date("2012-06-01"),
    y = 1300,
    label = "The installed capacity has nearly\ndoubled between 2017 and 2021.\nWhat will the limit be?",
    size = 3.5,
    hjust = 0
  )


```

## Exercise 3

### Objetives

-   Get wind data from NORA3 [link](https://thredds.met.no/thredds/projects/nora3.html). 

The R-script is based on matlab fucntions [link](https://www.mathworks.com/matlabcentral/fileexchange/93685-gridded-nora3-data-automated-and-remote-data-extraction.html)

### Solution

```{r}

library(terra)
library(tidyterra)
library(eurostat)
library(sf)
library(tidyverse)
library(purrr)
library(patchwork)
library(ncdf4)

```

```{r}

# # EU map
# box <- st_bbox(c(xmin = -20, xmax = 20, ymax = 45, ymin = 80),
#                 crs = st_crs(4326)) |> 
#   st_as_sfc() |> 
#   st_transform(3035)

eu_countries <- get_eurostat_geospatial(resolution = 10, 
                                        nuts_level = 0, 
                                        year = 2016,
                                        crs = "3035") 


```

Read data directly from the web (wiothout dowloading the data to a local folder

```{r}
#| label: funstions-nora3

#' Get the data of wind speed and direction at specific heihts from a raster
#' @param .r NORA3 data (SpatRaster)
#' @param .height Height to get the data (20, 50, 100, 250, 750)

get_wind_height <- function(.r, .height = 100){
  
  # Velocity vector (y, y)
  ux = subset(.r, paste0("x_wind_", .height, "m"))
  uy = subset(.r, paste0("y_wind_", .height, "m"))
  
  # Calculate magnityd (mag) and direction (dir)
  u_mag = sqrt(ux^2 + uy^2)
  names(u_mag) <- "magnitude"
  u_dir = terra::atan2(y = uy, x = ux) * 180/pi
  names(u_dir) <- "direction"

  # Generate raster 
  u = c(u_mag, u_dir) 
  
  # Output as one raster
  return(u)
  
}

# Function for dowloading wind data from NORA3 
get_wind_z <- function(.year,
                       .month,
                       .day,
                       .hour_group,
                       .lead_time){
  
  # URL of the data
  nora3_url <- paste0("https://thredds.met.no/thredds/dodsC/nora3/",
                      .year,
                      "/",
                      .month,
                      "/",
                      .day, 
                      "/",
                      .hour_group,
                      "/fc", 
                      .year,
                      .month, 
                      .day,
                      .hour_group,
                      "_",
                      .lead_time,
                      "_fp.nc")
  
  # Open the netCDF file
  ncin <- ncdf4::nc_open(nora3_url)
  
  # Get coordinate  variables
  lon <- ncdf4::ncvar_get(ncin,"x")
  lat <- ncdf4::ncvar_get(ncin,"y")
  
  # Get time
  time <- ncdf4::ncvar_get(ncin,"time")
  
  # Get wind speed at 10 m above ground (height4)
  dname <- "wind_speed"
  ws10_array <- ncdf4::ncvar_get(ncin,dname)
  dlname <- ncdf4::ncatt_get(ncin,dname,"standard_name")
  dunits <- ncdf4::ncatt_get(ncin,dname,"units")
  fillvalue <- ncdf4::ncatt_get(ncin,dname,"_FillValue")
  # replace netCDF fill values with NA's
  ws10_array[ws10_array == fillvalue$value] <- NA
  
  # Get wind direction at 10 m above ground (height4)
  dname <- "wind_direction"
  wd10_array <- ncdf4::ncvar_get(ncin,dname)
  dlname <- ncdf4::ncatt_get(ncin,dname,"standard_name")
  dunits <- ncdf4::ncatt_get(ncin,dname,"units")
  fillvalue <- ncdf4::ncatt_get(ncin,dname,"_FillValue")
  # replace netCDF fill values with NA's
  wd10_array[wd10_array == fillvalue$value] <- NA
  
  # x_wind_z[x,y,height2,time] 
  # ncdf4::ncvar_get(ncin,"height2") -- 20  50 100 250 500 750 m above ground
  dname <- "x_wind_z"
  xh2_array <- ncdf4::ncvar_get(ncin,dname)
  dlname <- ncdf4::ncatt_get(ncin,dname,"standard_name")
  dunits <- ncdf4::ncatt_get(ncin,dname,"units")
  fillvalue <- ncdf4::ncatt_get(ncin,dname,"_FillValue")
  # replace netCDF fill values with NA's
  xh2_array[xh2_array == fillvalue$value] <- NA
  
  # y_wind_z[x,y,height2,time]
  dname <- "y_wind_z"
  yh2_array <- ncdf4::ncvar_get(ncin,dname)
  dlname <- ncdf4::ncatt_get(ncin,dname,"standard_name")
  dunits <- ncdf4::ncatt_get(ncin,dname,"units")
  fillvalue <- ncdf4::ncatt_get(ncin,dname,"_FillValue")
  # replace netCDF fill values with NA's
  yh2_array[yh2_array == fillvalue$value] <- NA
  
  
  # create dataframe with values
  df <- expand.grid(lon,lat) |> 
    as_tibble() |> 
    dplyr::rename_with(~ c("lon", "lat"), 1:2) |> 
    # Add wind speed and direction at 10 m
    dplyr::mutate(wind10_mag = as.vector(ws10_array),
                  wind10_dir = as.vector(wd10_array)) |> 
    # Add wind speed at h2 
    dplyr::mutate(
      # x_wind_z
      x_wind_20m  = as.vector(xh2_array[ , , 1]),
      x_wind_50m  = as.vector(xh2_array[ , , 2]),
      x_wind_100m = as.vector(xh2_array[ , , 3]),
      x_wind_250m = as.vector(xh2_array[ , , 4]),
      x_wind_500m = as.vector(xh2_array[ , , 5]),
      x_wind_750m = as.vector(xh2_array[ , , 6]),
      # y_wind_z 
      y_wind_20m  = as.vector(yh2_array[ , , 1]),
      y_wind_50m  = as.vector(yh2_array[ , , 2]),
      y_wind_100m = as.vector(yh2_array[ , , 3]),
      y_wind_250m = as.vector(yh2_array[ , , 4]),
      y_wind_500m = as.vector(yh2_array[ , , 5]),
      y_wind_750m = as.vector(yh2_array[ , , 6])
    )
  
  # Create Raster with all data
  r_crs <- "+proj=lcc +lat_0=66.3 +lon_0=-42 +lat_1=66.3 +lat_2=66.3 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs"
  r <- tidyterra::as_spatraster(df, crs = r_crs, digits = 4)
  # Add time 
  time(r) <- rep(lubridate::as_datetime(time, tz = "UTC"), times = length(names(r)))
  
  # get wind speed and direction at all heights
  ff <- function(.height) { get_wind_height(r, .height) }
  u_height_list <- c(20, 50, 100, 250, 750)
  u_height <- map(u_height_list, ff)
  names(u_height) <- c("wind20", "wind50", "wind100", "wind250", "wind750")
  u_height <- u_height |>
    rast() |> 
    rename_with( ~ gsub("_1", "_mag", .x, fixed = TRUE)) |> 
    rename_with( ~ gsub("_2", "_dir", .x, fixed = TRUE))
  
  # Retrurn SpatRaster object
  rr <- c(tidyterra::select(r, wind10_mag,  wind10_dir), u_height)
  
  return(rr)
  
} 

```

```{r}
#| label: get-data


wind_nora3 <- get_wind_z(.year = "2018",
                         .month = "11",
                         .day = "08",
                         .hour_group = "00",
                         .lead_time = "004")

wind_nora3

```

```{r}
#| label: fig-wind-speed

ggplot() +
  geom_spatraster(data =  select(wind_nora3 , ends_with("mag"))) +
  facet_wrap(~lyr, ncol = 2) +
  scale_fill_whitebox_c(name = "u [m/s]", palette = "viridi") +
  geom_sf(data = eu_countries, fill = NA, colour = "white") +
  coord_sf(expand = FALSE, crs = sf::st_crs(3035)) +
  scale_x_continuous(limits = c(3000000, 5000000)) +
  scale_y_continuous(limits = c(3600000, 5300000)) +
  labs(title = terra::time(wind_nora3)[1]) +
  theme_bw()

```

Extract values from one point (e.g., near Utsira - Coordinates from google maps \[WGS84\]: 59.346588 (lat), 4.899842 (long)).

```{r}
#| label: wind-one-point

# Point 
xy <- cbind(4.899842, 59.346588)
point <- vect(xy, crs="+proj=longlat +datum=WGS84") |> 
  project(crs(wind_nora3))

# Extract values
p_wind <- terra::extract(wind_nora3, point) |>  
  select(ends_with("_mag")) |> 
  pivot_longer(cols = everything()) |> 
  rename(height_m = name,
         wind_m_s = value) |> 
  mutate(height_m = readr::parse_number(height_m))
  

# Plot
ggplot() + 
  geom_point(data = p_wind,
             aes(x = wind_m_s, y = height_m ),
             col = "blue") +
  labs(x = "u [m/s]",
       y = "height [m]",
       title = "Vertical wind profile at point: 59.346588 (lat), 4.899842 (long)", 
       subtitle = terra::time(wind_nora3)[1]) +
  theme_bw()
  
              
```

Interpolation wind profile [@solbrekke2022]:

-   Exponential relation:

    $$  u_{z_2}(t) = u_{z_1}(t) \Big(\frac{z_2}{z_1}\Big)^{\alpha(t)} $$

-   Exponential power law coefficient:

    $$  \alpha(t) = \frac{ln\Big( \frac{u_{z_2}(t)}{u_{z_1}(t)} \Big)}{ln\Big( \frac{z_2}{z_1} \Big)} $$




```{r}

get_inter_wind_profile <- function(x){
  
  # Vector with alpha depending on height
  alpha <- rep(NA, 5)
  for(i in seq_along(alpha)) {
    alpha[i] = as.numeric( (log(x[i, 2]/x[i+1, 2]) / log(x[i, 1]/x[i+1, 1])) )
  }
  
  # Create data frame for interpolation (steps = 1) 
  wind_inter <- tibble(height_m = seq(10, 750, 1)) |> 
    mutate(wind_m_s = NA) |> 
    mutate(alpha = case_when(
      height_m <= 20 ~ alpha[1],
      height_m >  20 &  height_m <=  50 ~ alpha[2],
      height_m >  50 &  height_m <= 100 ~ alpha[3],
      height_m > 100 &  height_m <= 250 ~ alpha[4],
      height_m > 250 &  height_m <= 750 ~ alpha[5]
    ))  
  
  # Interpolation (based on u [m/s] at 10 m)
  wind_inter$wind_m_s[1] = x[x["height_m"] == 10, ]$wind_m_s
  for(i in 2:length(wind_inter$height_m)) {
    wind_inter$wind_m_s[i] = wind_inter$wind_m_s[i-1] * (wind_inter$height_m[i] / wind_inter$height_m[i-1])^wind_inter$alpha[i]
  }
  
  return(wind_inter)
  
}
  
wind_inter <- get_inter_wind_profile(p_wind)

# Plot
ggplot() + 
  geom_point(data = p_wind,
             aes(x = wind_m_s, y = height_m ),
             col = "blue") +
  geom_line(data = wind_inter,
             aes(x = wind_m_s, y = height_m ),
             col = "red") + 
  labs(x = "u [m/s]",
       y = "height [m]",
       title = "Vertical wind profile at point: 59.346588 (lat), 4.899842 (long)", 
       subtitle = terra::time(wind_nora3)[1]) +
  theme_bw()


```



## Exercise 4

### Objetives

Time series wind  usimg [NORA3](https://thredds.met.no/thredds/projects/nora3.html) data

Analyse wind speed and ditection over time in a point at 100 m hight. 

### Solution

```{r}

library(terra)
library(tidyterra)
library(eurostat)
library(sf)
library(tidyverse)
library(lubridate)
library(purrr)
library(patchwork)
library(ncdf4)

```

Create a funstion for getting the at 100m height. 

```{r}
#| label: function-get-data-100m


get_wind_100m_point <- function(.year,
                                .month,
                                .day,
                                .hour_group,
                                .lead_time,
                                .long,
                                .lat){
  
  # URL of the data
  nora3_url <- paste0("https://thredds.met.no/thredds/dodsC/nora3/",
                      .year,
                      "/",
                      .month,
                      "/",
                      .day, 
                      "/",
                      .hour_group,
                      "/fc", 
                      .year,
                      .month, 
                      .day,
                      .hour_group,
                      "_",
                      .lead_time,
                      "_fp.nc")
  
  # Open the netCDF file
  ncin <- ncdf4::nc_open(nora3_url)
  
  # Get coordinate  variables
  lon <- ncdf4::ncvar_get(ncin,"x")
  lat <- ncdf4::ncvar_get(ncin,"y")
  
  # Get time
  time <- ncdf4::ncvar_get(ncin,"time")
  
  # x_wind_z[x,y,height2,time] 
  # ncdf4::ncvar_get(ncin,"height2") -- 20  50 100 250 500 750 m above ground
  dname <- "x_wind_z"
  xh2_array <- ncdf4::ncvar_get(ncin,dname)
  dlname <- ncdf4::ncatt_get(ncin,dname,"standard_name")
  dunits <- ncdf4::ncatt_get(ncin,dname,"units")
  fillvalue <- ncdf4::ncatt_get(ncin,dname,"_FillValue")
  # replace netCDF fill values with NA's
  xh2_array[xh2_array == fillvalue$value] <- NA
  
  # y_wind_z[x,y,height2,time]
  dname <- "y_wind_z"
  yh2_array <- ncdf4::ncvar_get(ncin,dname)
  dlname <- ncdf4::ncatt_get(ncin,dname,"standard_name")
  dunits <- ncdf4::ncatt_get(ncin,dname,"units")
  fillvalue <- ncdf4::ncatt_get(ncin,dname,"_FillValue")
  # replace netCDF fill values with NA's
  yh2_array[yh2_array == fillvalue$value] <- NA
  
  
  # create dataframe with values
  df <- expand.grid(lon,lat) |> 
    as_tibble() |> 
    dplyr::rename_with(~ c("lon", "lat"), 1:2) |> 
    # Add wind speed at 100 m 
    dplyr::mutate(
      # x_wind_z
      x_wind_100m = as.vector(xh2_array[ , , 3]),
      # y_wind_z 
      y_wind_100m = as.vector(yh2_array[ , , 3]),
    )
  
  # Create Raster with all data
  r_crs <- "+proj=lcc +lat_0=66.3 +lon_0=-42 +lat_1=66.3 +lat_2=66.3 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs"
  r <- tidyterra::as_spatraster(df, crs = r_crs, digits = 4) |> 
    # Calculate magnitude and direction
    mutate(u_mag = sqrt(x_wind_100m^2 + y_wind_100m^2),
           u_dir = terra::atan2(y = y_wind_100m, x = x_wind_100m) * 180/pi) |> 
    select(u_mag, u_dir)
  # Add time 
  time(r) <- rep(lubridate::as_datetime(time, tz = "UTC"), times = length(names(r)))
  
  # Extract wind values in the points  
  xy <- cbind(.long, .lat)
  point <- vect(xy, crs="+proj=longlat +datum=WGS84") |> 
    project(crs(r))
  
  # Extract values
  p_wind_100m <- terra::extract(r, point) |> 
    as_tibble() |> 
    mutate(time = as_datetime(time(r)[1]))
  
  return(p_wind_100m)
  
} 

```





```{r}
#| label: get-wind-data-100m
#| cache: true


df <- tibble(
  time = seq.Date(from = as.Date("2018-01-01"),
                  to = as.Date("2018-01-02"),
                  by= "day"),
  data = list(
    tibble(hour_group = rep(c("00", "06", "12", "18"), each = 6),
           lead_time = rep(c("004", "005", "006", "007", "008", "009"), time = 4) 
    )
  )
) |> 
  separate(time, c("year", "month", "day")) |> 
  unnest(data) |> 
  mutate(long = 4.899842,
         lat = 59.346588)

wind_100m <- df |> 
  rowwise() |> 
  mutate(wing_100m = get_wind_100m_point(.year = year,
                                         .month = month,
                                         .day = day,
                                         .hour_group = hour_group,
                                         .lead_time = lead_time,
                                         .long = long,
                                         .lat = lat)) |>  
  unnest(wing_100m) 

```

```{r}

ggplot(data = wing_100m, aes(x = time, y = u_mag)) +
  geom_point() +
  geom_smooth(span = 0.3, se = FALSE) +
  # Cut-in
  geom_hline(yintercept = 3.5, col = "#009E73", linetype = "dashed") + 
  geom_text(x = as_datetime("2018-11-08 04:00:00"),
            y = 4, 
            label = "Cut-in",
            colour = "#009E73") + 
  # Cut-off
  geom_hline(yintercept = 25, col = "#D55E00", linetype = "dashed") +
  geom_text(x = as_datetime("2018-11-08 04:00:00"),
            y = 25.5, 
            label = "Cut-off",
            colour = "#D55E00") +
  # Format labels and title
  labs(x = "Time",
       y = "u [m/s]",
       title = "Wind speed at 100 m height", 
       subtitle = "Coordinates (WGS84): Long = 4.899842, lat = 59.346588",
       caption = "Data: NORA3") +
  coord_cartesian(ylim = c(0,30)) +
  theme_bw()

```

