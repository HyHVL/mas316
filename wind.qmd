---
execute:
  warning: false
---

# Wind energy {.unnumbered}

Intro to wind energy

## Exercise 1

Map wind turbines in Rogaland from OSM and calculate the total energy capacity installed.

### Objetives

-   OSM (and how get data from it)
-   Map points data (interactive map)\
-   Manipulate spatial data (e.g., intersection points - polygons)
-   Types of data in a data frame
-   Data wrangling

### Solution

Load libraries

```{r}

library(osmdata)
library(sf)
library(tmap)
library(tidyverse)

```

Get data from [OpenStreetMap](https://www.openstreetmap.org/) with `osmdata`, and transform to a `sf` object.

```{r}

query <- opq(bbox = "Rogaland", timeout = 50) |> 
   add_osm_feature(key = "generator:source", value = "wind")
data <-  osmdata_sf(query)

wind_turbines <- data$osm_points 

```

Names of the data frame,

```{r}

wind_turbines |>
  names()

```

Clean names

```{r}

wind_turbines <- wind_turbines |>
  janitor::clean_names()

names(wind_turbines)

```

Interactive map with `tmap`.

```{r}
#| label: fig-map-osm-a
#| fig-cap: Wind turbines in Rogaland (Data from OSM)


tmap_mode("view")

tm_shape(wind_turbines) +
  tm_dots(col = "#0072B2")

```

There are some wind turbines that ar not in Rogaland, so we are going to delect them from the dataset. For that we need to intersect our points (`wind turbines`) with the polygon (`Rogaland`).

```{r}
#| label: fig-map-osm-b
#| fig-cap: Wind turbines in Rogaland (Data from OSM)


# Get Norwegian counties (polygons)) from GISCO
counties <- giscoR::gisco_get_nuts(country = "NO",
                                   year = "2021",
                                   nuts_level = 3,
                                   epsg = "4326",
                                   resolution = "01") 
# Get only rogaland county
rogaland <- counties |> 
  filter(NUTS_NAME == "Rogaland")

# Intersect wind turbines (points) with rogaland (polygons)
wind_turbines <- wind_turbines |> 
  st_intersection(rogaland)

# Plot
tm_shape(wind_turbines) +
  tm_dots(col = "#0072B2")

```

Now, we are going to calculate the maximum capacity (MW) installed in the region. If we inspect the data, there is a column describing called `generator:output:electricity`, which give the information we are looking for in MW. However, if we inspect the columns we see that the values are characters (`<chr>`) not numbers, so we can not carried out numerical operations on them.

```{r}

glimpse(wind_turbines)

```

Therefore, we need to transform the data to numbers. We can use the function `parse_number()` from the package `readr` (inside `tidyverse`). For not deleting the column, we can generate a new one (e.g., `gen_electricity_mw`)

```{r}

wind_turbines <- wind_turbines |> 
  mutate(gen_electricity_mw = parse_number(generator_output_electricity) )
     
# Show first 10 values of the column
wind_turbines$gen_electricity_mw |> 
  head(10)

```

Remove `NA` in energy generator:

```{r}

wind_turbines <- wind_turbines |> 
  drop_na(gen_electricity_mw)

# Summary of energy generator (without NA) 
wind_turbines$gen_electricity_mw |> 
  head(10)

```

calculate the total generation energy capacity.

```{r}

total_capacity_mw <- wind_turbines$gen_electricity_mw |> sum()

print(total_capacity_mw)

```

So the total wind capacity installed in Rogaland is `r total_capacity_mw` MW. Note, that this is only the maximum energy installed and not how much it is generate in the region. It does not take into account the efficiency of the turbines nor wind availability!!.

## Exercise 2

Map wind farms and wind turbines from NVE ([www.nve.no](https://www.nve.no/)). The data are free but need to be downloaded from <https://nedlasting.nve.no/gis/> before reading into R (save it in a folder: e.g., `~/data/big_data/NVE/NVEData`). I have downloaded them in `.geojson` format. Therefore, we need to read them with the `geojsonsf` package, which converts `GeoJSON` to `sf` objects.

### Objetives

-   Load data from local files
-   Data wrangling (preprocessing)
-   Formats of spatial data
-   Spatial intersections (i.e., points - polygons)
-   Types of vector data (i.e., lines, points, polygons)
-   Plot more that one layer in a interactive map

### Solution

```{r}
#| label: nve-data

# Libraries
library(geojsonsf)
library(sf)
library(tidyverse)
library(tmap)

```

Load data from a local file.

a)  Wind turbines (point data)

```{r}
#| label: load-nve-wind-turbines

wind_turbines_nve_path <- "data/big_data/NVE/NVEData/Vindkraft_Vindturbin.geojson"
wind_turbines_nve <- geojson_sf(wind_turbines_nve_path) |> 
  # dataUttaksdato to date format
  mutate(dataUttaksdato = ymd(dataUttaksdato))

wind_turbines_nve

```

b)  Wind farms areas (Polygons)

```{r}
#| label: load-nve-wind-farms


wind_farms_nve_path <- "data/big_data/NVE/NVEData/Vindkraft_VindkraftanleggOmr.geojson"
wind_farms_nve <- geojson_sf(wind_farms_nve_path) |> 
  # Coherce to dates format
  mutate(across(.cols = ends_with("dato"), .fns = ymd)) |> 
  # Add ID column
   rowid_to_column("id_farm")

wind_farms_nve

```

Map both datasets together:

```{r}
#| label: fig-map-nve
#| fig-cap: Wind turbines in Rogaland (Data from NVE)


tmap_mode("view")


tm_shape(wind_farms_nve) + 
  tm_fill("status", alpha = 0.5, title = "Wind farm status") +
  # Add wind turbines
  tm_shape(wind_turbines_nve) +
  tm_dots(col = "#0072B2")

```

Note: Status

D - Drift (Operations) N - Nedlagt (Decommissioned) O - Ombygd (Rebuilt) P - Planlagt (Planned) P1 - Planlagt illustrert (Planed illustrated) P2 - Planlagt, prosjektert (Planed, projected) U - Under arbeid (in progress) V - Vedtatt (Adopted) FJ - Fjernet (Removed)

To calculate the actual capacity installed, we need to select only the wind farms that are in operation from `wind_farms_nve`, and sum the power capacity (`effekt_MW`). We can do that by montds to see the temporal evolution.

```{r}
#| label: wind-capacity
#| fig-cap: Wind capacity

power_year <- wind_farms_nve |>
  # Get only farm in operation
  filter(status == "D") |> 
  # Summarize power by month
  group_by(year = lubridate::floor_date(idriftDato, "year")) %>%
  summarize(power_MW = sum(effekt_MW)) |> 
  ungroup() |> 
  # Cummulative sum
  mutate(cumsum_power_MW = cumsum(power_MW))

# Column plot
ggplot(data = power_year,
       aes(x = year, y = cumsum_power_MW)) +
  geom_col(fill = "darkblue") +
  labs(title = "Cumulative wind power installed in Rogaland",
       y = "Power [MW]",
       x = "") +
  theme_bw()

```

We can count now the number of wind turbines per wind farm, to understand for example the volume of blades we may need to recycler.

```{r}

 # Intersect points (wind turbines) wit polygons (wind farms)
number_turbines_farm <- wind_turbines_nve |> 
  # Detect wind farm 
  st_intersection(wind_farms_nve) |> 
  # Number of turbines 
  group_by(id_farm, status,  idriftDato, effekt_MW) |> 
  summarize(n = n()) |> 
  ungroup()

number_turbines_farm

```

Now we are going to plot the evolution but in the number od witd turbines in operation:

```{r}

turbines_year <- number_turbines_farm |>
  # Get only farm in operation
  filter(status == "D") |> 
  # Summarize power by month
  group_by(year = lubridate::floor_date(idriftDato, "year")) %>%
  summarize(num_turbines = sum(n)) |> 
  ungroup() |> 
  # Cummulative sum
  mutate(cumsum_num_turbines = cumsum(num_turbines))

# Column plot
ggplot(data = turbines_year,
       aes(x = year, y = cumsum_num_turbines)) +
  geom_col(fill = "darkblue") +
  labs(title = "Cumulative number of wind turbines installed in Rogaland",
       y = "",
       x = "") +
  theme_bw()


```

How would you improve these figures? For example, we can change the background colour, add subtitles and captions, change font sizes, etc. Can you generate your own figure? Why do you think it looks better? As an example I have created this one, what do you think?

```{r}


caption_text <- "Data source: The Norwegian Water Resources and Energy Directorate (NVE)\nAuthor: Javier ElÃ­o (@Elio_javi) - Western Norway University of Applied Sciences"

# Column plot
ggplot(data = power_year,
       aes(x = year, y = cumsum_power_MW)) +
  geom_col(fill = "#0072B2") +
  labs(title = "Wind energy in Rogaland (Norway)",
       subtitle = "Cumulative power installed capacity in MW",
       caption = caption_text,
       y = "",
       x = "") +
  expand_limits(y = c(0, 1700)) +
  theme_bw() +
  theme(
    # Title and captions
    plot.title = element_text(size = 15, colour = "darkblue", face = "bold"),
    plot.subtitle = element_text(size = 10, colour = "grey25"),
    plot.caption = element_text(size = 10, colour = "grey25"),
    # Background colour
    plot.background = element_rect(fill = "linen", colour = NA),
    panel.background = element_rect(fill = "grey85", colour = NA)
  ) +
  # Add arrow
  annotate(
    'curve',
    x = as.Date("2016-01-01"), # Play around with the coordinates until you're satisfied
    y = 800,
    yend = 1600,
    xend = as.Date("2021-01-01"),
    linewidth = 1.5,
    curvature = 0.3,
    col = "#D55E00",
    arrow = arrow(length = unit(0.5, 'cm'))
  ) +
  # Add text
  annotate(
    'text',
    x = as.Date("2012-06-01"),
    y = 1300,
    label = "The installed capacity has nearly\ndoubled between 2017 and 2021.\nWhat will the limit be?",
    size = 3.5,
    hjust = 0
  )


```

## Exercise 3

### Objetives

-   Get wind data from NORA3 [link](https://thredds.met.no/thredds/projects/nora3.html).

The R-script is based on matlab fucntions [link](https://www.mathworks.com/matlabcentral/fileexchange/93685-gridded-nora3-data-automated-and-remote-data-extraction.html)

### Solution

```{r}

library(terra)
library(tidyterra)
library(eurostat)
library(sf)
library(tidyverse)
library(purrr)
library(patchwork)
library(ncdf4)

source("scripts/rnora3.r")

```

```{r}

# # EU map
# box <- st_bbox(c(xmin = -20, xmax = 20, ymax = 45, ymin = 80),
#                 crs = st_crs(4326)) |> 
#   st_as_sfc() |> 
#   st_transform(3035)

eu_countries <- get_eurostat_geospatial(resolution = 10, 
                                        nuts_level = 0, 
                                        year = 2016,
                                        crs = "3035") 


```

Read data directly from the web (without downloading the data to a local folder

```{r}
#| label: get-data


wind_nora3 <- get_wind_z(.year = "2000",
                         .month = "01",
                         .day = "01",
                         .hour_group = "06",
                         .lead_time = "005")

wind_nora3

```

```{r}
#| label: fig-wind-speed

ggplot() +
  geom_spatraster(data =  select(wind_nora3 , ends_with("mag"))) +
  facet_wrap(~lyr, ncol = 2) +
  scale_fill_whitebox_c(name = "u [m/s]", palette = "viridi") +
  geom_sf(data = eu_countries, fill = NA, colour = "white") +
  coord_sf(expand = FALSE, crs = sf::st_crs(3035)) +
  scale_x_continuous(limits = c(3000000, 5000000)) +
  scale_y_continuous(limits = c(3600000, 5300000)) +
  labs(title = terra::time(wind_nora3)[1]) +
  theme_bw()

```

Extract values from one point (e.g., near Utsira - Coordinates from Google maps \[WGS84\]: 59.346588 (lat), 4.899842 (long)).

```{r}
#| label: wind-one-point

# Point 
xy <- cbind(4.899842, 59.346588)
point <- vect(xy, crs="+proj=longlat +datum=WGS84") |> 
  project(crs(wind_nora3))

# Extract values
p_wind <- terra::extract(wind_nora3, point) |>  
  select(ends_with("_mag")) |> 
  pivot_longer(cols = everything()) |> 
  rename(height_m = name,
         wind_m_s = value) |> 
  mutate(height_m = readr::parse_number(height_m))
  

# Plot
ggplot() + 
  geom_point(data = p_wind,
             aes(x = wind_m_s, y = height_m ),
             col = "blue") +
  labs(x = "u [m/s]",
       y = "height [m]",
       title = "Vertical wind profile at point: 59.346588 (lat), 4.899842 (long)", 
       subtitle = terra::time(wind_nora3)[1]) +
  theme_bw()
  
              
```

Interpolation wind profile [@solbrekke2022]:

-   Exponential relation:

    $$  u_{z_2}(t) = u_{z_1}(t) \Big(\frac{z_2}{z_1}\Big)^{\alpha(t)} $$

-   Exponential power law coefficient:

    $$  \alpha(t) = \frac{ln\Big( \frac{u_{z_2}(t)}{u_{z_1}(t)} \Big)}{ln\Big( \frac{z_2}{z_1} \Big)} $$

```{r}

wind_inter <- get_inter_wind_profile(p_wind)

# Plot
ggplot() + 
  geom_point(data = p_wind,
             aes(x = wind_m_s, y = height_m ),
             col = "blue") +
  geom_line(data = wind_inter,
             aes(x = wind_m_s, y = height_m ),
             col = "red") + 
  labs(x = "u [m/s]",
       y = "height [m]",
       title = "Vertical wind profile at point: 59.346588 (lat), 4.899842 (long)", 
       subtitle = terra::time(wind_nora3)[1]) +
  theme_bw()


```

## Exercise 4

### Objetives

Time series wind using [NORA3](https://thredds.met.no/thredds/projects/nora3.html) data

Analyse wind speed and direction over time in a point at 100 m hight.

### Solution

```{r}

library(terra)
library(tidyterra)
library(eurostat)
library(sf)
library(tidyverse)
library(lubridate)
library(photobiology)
library(purrr)
library(patchwork)
library(ncdf4)
library(gt)

```

Read data that have been previously downloaded into a local file.

```{r}

dat_path <-  "data/NORA3_wind_sub_lon5.029584_lat59.1403111_20000101_20001231.csv"

wind_nora3 <- read_csv(dat_path) |> 
  # Add columns indicating day/night time
  mutate(day_night = ifelse(is_daytime(time, tz = "Europe/Oslo"), "day", "night")) |> 
  relocate(day_night, .after = time)

```

#### Hourly analysis

Use average hourly data directly from NORA3.

```{r}
#| label: fig-wind-speed-day
#| fig-cap: Hourly wind speed (m/s)


ggplot(data = wind_nora3, aes(x = time, y = wind_speed_100m)) +
  geom_line(colour = "grey") +
  # geom_smooth(span = 0.3, se = TRUE) +
  # Cut-in
  geom_hline(yintercept = 3.5, col = "#009E73", linetype = "dashed") + 
  geom_text(x = as_datetime("2018-01-01 04:00:00"),
            y = 4,
            label = "Cut-in",
            colour = "#009E73") +
  # Cut-off
  geom_hline(yintercept = 25, col = "#D55E00", linetype = "dashed") +
  geom_text(x = as_datetime("2018-01-01 04:00:00"),
            y = 25.5,
            label = "Cut-off",
            colour = "#D55E00") +
  # Format labels and title
  labs(x = "Time",
       y = "u [m/s]",
       title = "Hourly wind speed at 100 m height", 
       subtitle = "Coordinates (WGS84): Long = 4.899842, lat = 59.346588",
       caption = "Data: NORA3") +
  coord_cartesian(ylim = c(0,30)) +
  theme_bw()
  
```

Histogram

```{r}
#| label: fig-histogram
#| fig-cap: Wind speed histogram


# Plot histogram 
ggplot() +
  geom_histogram(data = wind_nora3, aes(x = wind_speed_100m, y = after_stat(density)),
                 binwidth = 0.5, 
                 fill = "#D55E00", 
                 colour = "grey") +
  # Format labels and title
  labs(x = "u [m/s]",
       title = "Histogram of hourly wind speed at 100 m height", 
       subtitle = "Point coordinates (WGS84): Long = 4.899842, lat = 59.346588",
       caption = "Data: NORA3") +
  coord_cartesian(xlim = c(0, 65)) +
  theme_bw() 

```

Fit a Weibull distribution

```{r}
#| label: fig-fit-distribution
#| fig-cap: Weibull distribution 

# Fit weibul distribution
fit <- fitdistrplus::fitdist(wind_nora3$wind_speed_100m,"weibull")

# Put parameter in a table (inset element)
weibull_param <- tibble(param = rownames(as.data.frame(fit$estimate)),
                        estimate = fit$estimate,
                        std_Error = fit$sd)

# Generate values for addind the density curve
fit_values <- rweibull(1000000, shape = fit$estimate[1], scale = fit$estimate[2]) |> 
  as_tibble()

# Plot histogram together with the weibull distribution 
ggplot() +
  geom_histogram(data = wind_nora3, aes(x = wind_speed_100m, y = after_stat(density)),
                 binwidth = 0.5, 
                 fill = "#D55E00", 
                 colour = "grey") +
  # Addd Weibull
  geom_density(data = fit_values,
               aes(x = value, y = after_stat(density)),
               colour = "#0072B2",
               linewidth = 1) +
  # Format labels and title
  labs(x = "u [m/s]",
       title = "Weibull distribution of hourly wind speed at 100 m height", 
       subtitle = "Point coordinates (WGS84): Long = 4.899842, lat = 59.346588",
       caption = "Data: NORA3") +
  coord_cartesian(xlim = c(0, 65)) +
  theme_bw() +
  # Add inset table
  inset_element(gt(weibull_param) |> 
                  fmt_number(decimals = 2),
                0.60, 0.75, 0.95, 0.95)

```

Day-night variation in the wind speed distribution

```{r}
#| label: fig-histogram-day-nigh
#| fig-cap: Histogram and weibull parameters of wind speed 

 
# Separate by day-night and fit a weibull for each group 
fit_weibull <- function(df) { fitdistrplus::fitdist(df$wind_speed_100m,"weibull") }

group_names <- wind_nora3 |> 
  group_by(day_night) |>
  group_keys() |>
  pull(1)

fit <- wind_nora3 |> 
  group_split(day_night) |> 
  set_names(group_names) |> 
  map(.f = fit_weibull)

# Put parameter in a table (inset element)
weibull_param <- tibble(param = c("shape", "scale"),
                        group = "day",
                        estimate = fit$day[[1]],
                        std_error = fit$day[[3]]
  ) |> 
  bind_rows(
    tibble(param = c("shape", "scale"),
           group = "night",
           estimate = fit$night[[1]],
           std_error = fit$night[[3]])
  )


# Generate values for adding the weibull curve
fit_values <- tibble(
  day = rweibull(1000000, shape = fit$day[[1]][1], scale = fit$day[[1]][2]),
  night = rweibull(1000000, shape = fit$night[[1]][1], scale = fit$night[[1]][2])
) |> 
  pivot_longer(cols = everything(),
               names_to = "day_night",
               values_to = "value"
               )

# Plot histograms
ggplot() +
  geom_histogram(data = wind_nora3, aes(x = wind_speed_100m, y = after_stat(density)),
                 binwidth = 0.5, 
                 fill = "#D55E00", 
                 colour = "grey") +
  # Addd Weibull
  geom_density(data = fit_values,
               aes(x = value, y = after_stat(density)),
               colour = "#0072B2",
               linewidth = 1) +
  # Format labels and title
  labs(x = "u [m/s]",
       title = "Weibull distribution of hourly wind speed at 100 m height", 
       subtitle = "Point coordinates (WGS84): Long = 4.899842, lat = 59.346588",
       caption = "Data: NORA3") +
  coord_cartesian(xlim = c(0, 65)) +
  facet_grid(~day_night) +
  theme_bw() +
  # Add inset table
  inset_element(
    gt(filter(weibull_param, group == "day") |> select(-group)) |> 
      fmt_number(decimals = 2),
    0.15, 0.8, 0.35, 0.95
  ) +
  inset_element(
    gt(filter(weibull_param, group == "night") |> select(-group)) |> 
      fmt_number(decimals = 2),
    0.65, 0.8, 0.85, 0.95
  )

```

Time bellow/above thresholds:

```{r}
#| label: tbl-wind-production-1h
#| tbl-cap: Percentage of time that a wind turbine is producing energy based on average hourly wind speed data (cut-in = 3.5 m/s, and cut-off = 25 m/s) 



# Time in production 
wind_nora3 <- wind_nora3 |> 
  select(time, wind_speed_100m) |> 
  mutate(production = case_when(
    wind_speed_100m < 3.5 ~ FALSE,
    wind_speed_100m >  25 ~ FALSE,
    .default = TRUE)
    ) 

wind_nora3 |> 
  summarise(
    total_hours = n(),
    total_prod = sum(production),
    perc = 100 * mean(production)
  ) |> 
  gt() |> 
  fmt_number(columns = perc,
             decimals = 1)


```

#### Downscale to 10-min resolution

Create simulated data (n = 1000) based on NORA3 hourly data. Simulated data follow a Weibull distribution with the same global shape of day/night but mean values of the hourly data.

```{r}
#| label: simulaed-data


set.seed(36)
n_sim = 1000

# Initial data frame  
sim_wind_nora3 <- tibble(time = seq(ymd_hm("2000-01-01 00:00"),
                                    ymd_hm("2000-12-31 23:50"), 
                                    by = "10 mins")) |> 
  # Add mean values and simulate weibull 
  left_join(wind_nora3) |> 
  dplyr::select(time, wind_speed_100m) |> 
  fill(wind_speed_100m) |> 
  # Add columns indicatind day/night time
  mutate(day_night = ifelse(is_daytime(time, tz = "Europe/Oslo"), "day", "night")) 

# Simulations day
wd_shape <- weibull_param |> filter(group == "day", param == "shape") |> pull(estimate)
sim_wind_nora3_day <- filter(sim_wind_nora3, day_night == "day")
sim_day <- matrix(NA, length(sim_wind_nora3_day$wind_speed_100m), n_sim)
wind_speed_100m <- sim_wind_nora3_day$wind_speed_100m

for(i in 1:n_sim) {
  for(j in seq_along(wind_speed_100m)) {
    sim_day[j, i] = rweibull(1, shape = wd_shape, scale = wind_speed_100m[j] / gamma(1+(1/wd_shape)))
  }
}

sim_day <- sim_day |> 
  as_tibble() |> 
  rename_with(~ paste0("sim_", .)) |> 
  rename_with(~ gsub("V", "", .x, fixed = TRUE))

sim_wind_nora3_day <- sim_wind_nora3_day |> 
  bind_cols(sim_day)

# Simulations night
wd_shape <- weibull_param |> filter(group == "night", param == "shape") |> pull(estimate)
sim_wind_nora3_night <- filter(sim_wind_nora3, day_night == "night")
sim_night <- matrix(NA, length(sim_wind_nora3_night$wind_speed_100m), n_sim)
wind_speed_100m <- sim_wind_nora3_night$wind_speed_100m
for(i in 1:n_sim) {
  for(j in seq_along(wind_speed_100m)) {
    sim_night[j, i] = rweibull(1, shape = wd_shape, scale = wind_speed_100m[j] / gamma(1+(1/wd_shape)))
  }
}

sim_night <- sim_night |> 
  as_tibble() |> 
  rename_with(~ paste0("sim_", .)) |> 
  rename_with(~ gsub("V", "", .x, fixed = TRUE))

sim_wind_nora3_night <- sim_wind_nora3_night |> 
  bind_cols(sim_night)

# Merge data
sim_wind_nora3 <- sim_wind_nora3_day |> 
  bind_rows(sim_wind_nora3_night) |> 
  arrange(time)

```

```{r}
#| label: fig-wind-variability-sim


# Plot example of 4 simulations
sim_wind_nora3 |> 
  select("sim_1", "sim_2", "sim_3", "sim_4") |> 
  pivot_longer(cols = starts_with("sim"))  |> 
  ggplot(aes(x = value)) +
  geom_histogram(aes(y = after_stat(density)),
                 bins = 50,
                 fill = "#D55E00",
                 colour = "grey") +
  geom_density() +
  labs(title = "Wind distribution in simulated data",
       subtitle = "Example of the first four simulations",
       x = "u [m/s]") +
  facet_wrap(~ name, ncol = 2) +
  theme_bw() 
  
```

```{r}
#| label: fig-wind-speed-day-sim
#| fig-cap: Hourly wind speed (m/s) of simntetic data


# Example first four simulations
sim_wind_nora3 |> 
  select("time","wind_speed_100m", "sim_1", "sim_2", "sim_3", "sim_4") |> 
  pivot_longer(cols = starts_with("sim")) |> 
  ggplot() +
  geom_line(aes(x = time, y = value),
             colour = "grey",
             size = 0.6,
             alpha = 0.5) + 
  # Hourly points
  geom_line(data = wind_nora3, aes(x = time, y = wind_speed_100m), col = "red") +
  # Cut-in
  geom_hline(yintercept = 3.5, col = "#009E73", linetype = "dashed") +
  # Cut-off
  geom_hline(yintercept = 25, col = "#D55E00", linetype = "dashed") +
  # Format labels and title
  labs(x = "Time",
       y = "u [m/s]",
       title = "Simulated wind speed at 100 m height (10 min resolution)", 
       subtitle = "Example of the first four simulations",
       caption = "Red line indicates hourly mean value from NORA3") +
  facet_wrap(~ name, ncol = 2) +
  theme_bw()

```

```{r}


sim_wind_nora3 |> 
  pivot_longer(cols = starts_with("sim")) |> 
  ggplot() +
  # geom_point(aes(x = time, y = value),
  #            colour = "#0072B2",
  #            size = 0.01,
  #            alpha = 0.05) + 
  geom_hex(aes(x = time, y = value), bins = 500) +
  viridis:: scale_fill_viridis(trans = "log10") +
  # Hourly points
  geom_line(data = wind_nora3,
            aes(x = time, y = wind_speed_100m), 
            col = "red",
            alpha = 0.5) +
  # Cut-in
  geom_hline(yintercept = 3.5, col = "#009E73", linetype = "dashed") +
  # Cut-off
  geom_hline(yintercept = 25, col = "#D55E00", linetype = "dashed") +
  # Format labels and title
  labs(x = "Time",
       y = "u [m/s]",
       title = "Simulated wind speed at 100 m height (10 min resolution)", 
       subtitle = "All simulations",
       caption = "Red line indicates hourly mean value from NORA3") +
  theme_bw()

```

Hourly average vs. NORA3

```{r}
#| label: fig-hourly-average
#| fig-cap: Relationship between the hourly wind speed calculated in the simulated data and NORA3 data values


sim_wind_nora3 |>  
  mutate(date_hour = format(time, "%Y-%m-%d %H")) |> 
  relocate(date_hour, .after = time) |> 
  pivot_longer(cols = starts_with("sim")) |> 
  group_by(date_hour) |> 
  summarise(
    n = n(),
    time = first(time),
    wind_speed_100m = first(wind_speed_100m),
    sim_mean = mean(value)
    ) |> 
  ungroup() |> 
  ggplot() +
  geom_point(aes(x = wind_speed_100m, y = sim_mean), alpha = 0.5) +
  labs(title = "Hourly wind speed [m/s]",
       y = "Simulated data",
       x = "NORA3 data") +
  geom_abline(intercept = 0, slope = 1, col = "red") +
  coord_equal() + 
  theme_bw()

         
```

```{r}

sim_wind_nora3_hour <- sim_wind_nora3 |>  
  mutate(date_hour = format(time, "%Y-%m-%d %H")) |> 
  relocate(date_hour, .after = time) |> 
  pivot_longer(cols = starts_with("sim")) |> 
  tidytable::group_by(date_hour,name) |> 
  tidytable::summarise(
    n = n(),
    time = first(time),
    wind_speed_100m = first(wind_speed_100m),
    sim_mean = mean(value)
  ) |> 
  tidytable::ungroup() 


sim_wind_nora3_hour |> 
  ggplot() +
  geom_hex(aes(x = wind_speed_100m, y = sim_mean), bins = 120) +
  viridis::scale_fill_viridis(trans = "log10") +
  labs(title = "Hourly wind speed [m/s]",
       y = "Simulated data",
       x = "NORA3 data") +
  geom_abline(intercept = 0, slope = 1, col = "red") +
  coord_equal() +
  theme_bw()


# Time in production 
sim_wind_nora3_hour <- sim_wind_nora3_hour |> 
  mutate(production = case_when(
    sim_mean < 3.5 ~ FALSE,
    sim_mean >  25 ~ FALSE,
    .default = TRUE)
    ) 

# Time in production
sim_wind_nora3_hour_prod <- sim_wind_nora3_hour |> 
  group_by(name) |> 
  summarise(
    total_hours = n(),
    total_prod = sum(production),
    perc = 100 * mean(production)
  ) |> 
  ungroup()


# Plot percentage
sim_wind_nora3_hour_prod |> 
  ggplot(aes(x = perc)) +
  geom_histogram(fill = "#D55E00",
                 colour = "grey") +
  # geom_density() +
  labs(x = "Perc. [%]",
       title = "Histogram of the percentage of time in production",
       subtitle = "Based on hourly means of simulated data",
       caption = "Wind speed between cut-in = 3.5 m/s and cut-off = 25 m/s") +
  theme_bw() 


```

Percentage of time that a wind generator is producing energy in the 10 minute simulated data:

```{r}
#| label: fig-perc-production-sim
#| fig-cap: Percentage of time that a wind generator is producing energy based on simulated data (cut-in = 3 m/s and cut-off = 25 m/s)


prod_10min <- sim_wind_nora3 |> 
  pivot_longer(cols = starts_with("sim")) |> 
  group_by(name) |>
  mutate(production = case_when(
    value < 3.5 ~ FALSE,
    value >  25 ~ FALSE,
    .default = TRUE)
    ) |> 
  summarise(
    total_hours = n() * 10/60,
    total_prod = sum(production) * 10/60,
    perc = 100 * mean(production)
    ) |> 
  ungroup()


# Plot
prod_10min |> 
  ggplot(aes(x = perc)) +
  geom_histogram(aes(y = after_stat(density)),
                 bins = 40,
                 fill = "#D55E00",
                 colour = "grey") +
  geom_density() +
  labs(x = "Perc. [%]",
       title = "Histogram of the percentage of hours in production",
       subtitle = "Wind speed between cut-in = 3.5 m/s and cut-off = 25 m/s") +
  theme_bw() 

```

```{r}
#| label: tbl-perc-production-sim
#| tbl-cap: Percentage of time that a wind generator is producing energy based on simulated data (cut-in = 3 m/s and cut-off = 25 m/s)


prod_10min |> 
  select("total_hours", "total_prod", "perc") |> 
  purrr::map_dfr(.f = summary, .id = "value") |> 
  mutate_at(vars(-value), as.numeric) |> 
  gt() |> 
  fmt_number(columns = vars(-value),
             rows = c(1,2),
             decimals = 0) |> 
  fmt_number(columns = vars(-value),
             rows = 3,
             decimals = 1)

```

Analyse variability in the data.

## Exercise 5

Analyse NORA3 time series (i.e., ten years of data at a resolution of 1h) at Zephyros (KarmÃ¸y - 59.346588 (lat), 4.899842 (long)).

Turbine characteristics:

-   Turbine: Siemens 2,3 MW (SWT-2.3-82)

-   Date of installation: 2009

-   Hub height: 65 m

-   Rotor diameter: 82.4 m

-   Rated wind speed: 17 m/s

-   Cut-in wind speed: 3.5 m/s

-   Cut-off wind speed: 25 m/s

Power curve: https://www.thewindpower.net/turbine_en_23_siemens_swt-2.3-82.php

```{r}
#| label: libraries-ex5


library(terra)
library(tidyterra)
library(eurostat)
library(sf)
library(tidyverse)
library(lubridate)
library(photobiology)
library(purrr)
library(patchwork)
library(ncdf4)
library(gt)

```

```{r}
#| label: read-data-nora3-10y


dat_path <-  "data/NORA3_wind_sub_lon5.029584_lat59.1403111_20100101_20231231.csv"

wind_nora3 <- read_csv(dat_path, skip = 16) |> 
  # Add columns indicating day/night time
  mutate(day_night = ifelse(is_daytime(time, tz = "Europe/Oslo"), "day", "night")) |> 
  relocate(day_night, .after = time)  
  # # Select one year (e.g. 2023)
  # filter(year(time) == 2023) 

```

Summary data (P25, P50, P95):

```{r}
#| lable: plot-wind-profile-stats

wind_nora3 |> 
  select(time, starts_with("wind_speed")) |> 
  pivot_longer(cols = starts_with("wind_speed"),
               names_to = "height_m",
               values_to = "wind_m_s") |> 
  mutate(height_m = parse_number(height_m)) |>  
  arrange(time, height_m) |> 
  group_by(height_m) |> 
  summarise(p05 = quantile(wind_m_s, probs = 0.05),
            p25 = quantile(wind_m_s, probs = 0.25),
            p50 = median(wind_m_s),
            mean = mean(wind_m_s), 
            p95 = quantile(wind_m_s, probs = 0.95),
            p99 = quantile(wind_m_s, probs = 0.99),
            max = max(wind_m_s)) |> 
  pivot_longer(cols = -height_m,
               names_to = "percentile",
               values_to = "value") |> 
  mutate(percentile = as_factor(percentile)) |> 
  ggplot(aes(x = value, y = height_m, colour = percentile)) + 
  geom_point() +
  geom_path() +
  labs(x = "u [m/s]",
       y = "height [m]",
       colour = "Value",
       title = "Vertical wind profile statistics at 59.346588 (lat), 4.899842 (long)", 
       subtitle = paste("Period:", min(wind_nora3$time), "to", max(wind_nora3$time))) +
  theme_bw()

```

The wind seed at hub heigh (65 m) is calculated based on the following an exponential model [@solbrekke2022]:

-   Exponential relation:

    $$  u_{z_2}(t) = u_{z_1}(t) \Big(\frac{z_2}{z_1}\Big)^{\alpha(t)} $$

-   Exponential power law coefficient:

    $$  \alpha(t) = \frac{ln\Big( \frac{u_{z_2}(t)}{u_{z_1}(t)} \Big)}{ln\Big( \frac{z_2}{z_1} \Big)} $$

In this sense, we first interpolate the profile between points we have data (10 m - 100 m) with steps of 1 m, and then select the wind speed at hub height:

```{r}
#| label: function-interpolation


#' Interpolate wind speed profile
#' @param .x data frame with wind speed at different heights (10, 20, 50, 100, 250, 500, 750))
get_inter_wind_profile <- function(x){
  
  # Vector with alpha depending on height
  alpha <- rep(NA, length(x$wind_m_s)-1)
  for(i in seq_along(alpha)) {
    alpha[i] = as.numeric( (log(x[i, 2]/x[i+1, 2]) / log(x[i, 1]/x[i+1, 1])) )
  }
  
  # Create data frame for interpolation (steps = 1) 
  wind_inter <- tibble(height_m = seq(10, 750, 1),
                       wind_m_s = NA,
                       alpha = case_when(
                         height_m <= 20 ~  alpha[1],
                         height_m >  20 &  height_m <=  50 ~ alpha[2],
                         height_m >  50 &  height_m <= 100 ~ alpha[3],
                         height_m > 100 &  height_m <= 250 ~ alpha[4],
                         height_m > 250 &  height_m <= 500 ~ alpha[5],
                         height_m > 500 &  height_m <= 750 ~ alpha[6]
                       ))  
  
  # Interpolation (based on u [m/s] at 10 m)
  wind_inter$wind_m_s[1] = x[x["height_m"] == 10, ]$wind_m_s
  for(i in 2:length(wind_inter$height_m)) {
    wind_inter$wind_m_s[i] = wind_inter$wind_m_s[i-1] * (wind_inter$height_m[i] / wind_inter$height_m[i-1])^wind_inter$alpha[i]
  }
  
  return(wind_inter)
  
}

# Example for one point
x <- wind_nora3[89, ] |> 
  select(time, starts_with("wind_speed")) |> 
  pivot_longer(cols = starts_with("wind_speed"),
               names_to = "height_m",
               values_to = "wind_m_s")  |> 
  select(-time) |> 
  mutate(height_m = parse_number(height_m)) 

wp <- get_inter_wind_profile(x)

# Plot
ggplot() + 
  geom_point(data = x,
             aes(x = wind_m_s, y = height_m ),
             col = "blue") +
  geom_path(data = wp,
             aes(x = wind_m_s, y = height_m ),
             col = "red") + 
  labs(x = "u [m/s]",
       y = "height [m]") +
  theme_bw()

```

Interpolate all points, and get the value at hub height (65 m):

```{r}
#| cache: true


# Example for one point
get_wind_hub <- function(i){
  
 wind_nora3[i,] |> 
    select(time, starts_with("wind_speed")) |> 
    pivot_longer(cols = starts_with("wind_speed"),
                 names_to = "height_m",
                 values_to = "wind_m_s")  |> 
    select(-time) |> 
    mutate(height_m = parse_number(height_m)) |> 
    get_inter_wind_profile() |>
    filter(height_m == 65) |> 
    pull(wind_m_s)
 
}


library(furrr)
plan(multisession, workers = 7)
wind_speed_65m <-  future_map_dbl(.x = c(1:length(wind_nora3$time)),
                                  .f = get_wind_hub)

wind_nora3 <- wind_nora3 |> 
  mutate(wind_speed_65m = wind_speed_65m)

```

Plot time series at 65 m

```{r}
#| label: fig-wind-speed-day
#| fig-cap: Hourly wind speed (m/s)


p <- ggplot(data = wind_nora3, aes(x = time, y = wind_speed_65m)) +
  geom_line(colour = "grey") +
  # geom_smooth(span = 0.3, se = TRUE) +
  # Cut-in
  geom_hline(yintercept = 3.5, col = "#009E73", linetype = "dashed") + 
  geom_text(x = min(wind_nora3$time),
            y = 4,
            label = "Cut-in",
            colour = "#009E73") +
  # Cut-off
  geom_hline(yintercept = 25, col = "#D55E00", linetype = "dashed") +
  geom_text(x = min(wind_nora3$time),
            y = 25.5,
            label = "Cut-off",
            colour = "#D55E00") +
  # Format labels and title
  labs(x = "Time",
       y = "u [m/s]",
       title = "Hourly wind speed at hub height (65 m)", 
       subtitle = "Coordinates (WGS84): Long = 4.899842, lat = 59.346588",
       caption = paste("Period:", min(wind_nora3$time), "to", max(wind_nora3$time))) +
  coord_cartesian(ylim = c(0,30)) +
  theme_bw()

p

```

Time series analysis

```{r}

ws_ts <- ts(wind_nora3$wind_speed_100m, start = c(2010), frequency = 8760)

# seasonal, trend and irregular components
ws_ts_de <- decompose(ws_ts, type = "additive")
         
plot(ws_ts_de)
```

```{r}

ggseasonplot(ws_ts_de$seasonal, year.labels = F, continuous = TRUE)
```

```{r}
fit <- stl(ws_ts, s.window = "periodic")
autoplot(fit)
```

```{r}
gglagplot(ws_ts)
```

```{r}
ggAcf(ws_ts)
```

```{r}

autoplot(diff(ws_ts))
```

```{r}
ggAcf(diff(ws_ts))
```

```{r}

install.packages("feasts")
library(tsibble)
library(feasts)

wind_nora3

ws_tsbl <- wind_nora3 |>
  filter(year(time) == 2023) |> 
  select(time, wind_speed_65m) |> 
  as_tsibble(key = wind_speed_65m, index = time)

ws_tsbl %>%
  autoplot(wind_speed_65m)


```
